{"ast":null,"code":"import axios from 'axios';\nimport * as actions from './types';\nimport { clearErrors, clearSuccess } from './clearErrSuccess'; // add new account\n\nexport const addAccount = account => dispatch => {\n  dispatch(clearErrors());\n  dispatch(clearSuccess());\n  axios.post('/accounts/new', account).then(res => {\n    dispatch({\n      type: actions.GET_SUCCESS,\n      payload: {\n        success_msg: res.data.success_msg,\n        type: actions.ADD_ACCOUNT\n      }\n    });\n    dispatch({\n      type: actions.ADD_ACCOUNT,\n      payload: res.data.new_account\n    });\n  }).catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: {\n        type: actions.ADD_ACCOUNT,\n        errors: err.response.data\n      }\n    });\n  });\n}; // load all accounts\n\nexport const loadAccounts = () => dispatch => {\n  dispatch(accountsLoading());\n  axios.get('/accounts/all').then(res => {\n    dispatch({\n      type: actions.GET_ALL_ACCOUNTS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: {\n        type: actions.GET_ALL_ACCOUNTS,\n        errors: err.response.data\n      }\n    });\n  });\n}; // load account with id\n\nexport const loadAccount = account_id => dispatch => {\n  axios.get(\"/accounts/load/\".concat(account_id)).then(res => {\n    dispatch({\n      type: actions.LOAD_ACCOUNT,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: {\n        type: actions.LOAD_ACCOUNT,\n        errors: err.response.data\n      }\n    });\n  });\n}; // update bank account\n\nexport const update_bankAccount = account => dispatch => {\n  dispatch(clearErrors());\n  dispatch(clearSuccess());\n  axios.post(\"/accounts/update/\".concat(account.id), {\n    account: account\n  }).then(res => {\n    dispatch({\n      type: actions.UPDATE_ACCOUNT,\n      payload: {\n        account_id: res.data.account_id,\n        updated_account: res.data.updated_account\n      }\n    });\n    dispatch({\n      type: actions.GET_SUCCESS,\n      payload: {\n        success_msg: res.data.success_msg,\n        type: actions.UPDATE_ACCOUNT\n      }\n    });\n  }).catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: {\n        type: actions.UPDATE_ACCOUNT,\n        errors: err.response.data\n      }\n    });\n  });\n}; // delete bank account\n\nexport const delete_bankAccount = account_id => dispatch => {\n  dispatch(clearErrors());\n  dispatch(clearSuccess());\n  axios.delete(\"/accounts/delete/\".concat(account_id)).then(res => {\n    dispatch({\n      type: actions.GET_SUCCESS,\n      payload: {\n        success_msg: res.data.success_msg,\n        type: actions.DELETE_ACCOUNT\n      }\n    });\n    dispatch({\n      type: actions.DELETE_ACCOUNT,\n      payload: res.data.account_id\n    });\n  }).catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: {\n        type: actions.DELETE_ACCOUNT,\n        errors: err.response.data\n      }\n    });\n  });\n}; // set accounts loading\n\nconst accountsLoading = () => dispatch => {\n  dispatch({\n    type: actions.GET_ACCOUNTS_LOADING\n  });\n};","map":{"version":3,"sources":["/Users/trungvo/javascript-stack/smart-money/client/src/actions/accountActions.js"],"names":["axios","actions","clearErrors","clearSuccess","addAccount","account","dispatch","post","then","res","type","GET_SUCCESS","payload","success_msg","data","ADD_ACCOUNT","new_account","catch","err","GET_ERRORS","errors","response","loadAccounts","accountsLoading","get","GET_ALL_ACCOUNTS","loadAccount","account_id","LOAD_ACCOUNT","update_bankAccount","id","UPDATE_ACCOUNT","updated_account","delete_bankAccount","delete","DELETE_ACCOUNT","GET_ACCOUNTS_LOADING"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport * as actions from './types';\nimport { clearErrors, clearSuccess } from './clearErrSuccess';\n\n// add new account\nexport const addAccount = (account) => dispatch => {\n  dispatch(clearErrors());\n  dispatch(clearSuccess());\n\n  axios.post('/accounts/new', account)\n    .then(res => {\n      dispatch({\n        type: actions.GET_SUCCESS,\n        payload: {\n          success_msg: res.data.success_msg,\n          type: actions.ADD_ACCOUNT\n        }\n      })\n      dispatch({\n        type: actions.ADD_ACCOUNT,\n        payload: res.data.new_account\n      })\n    })\n    .catch(err => {\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: {\n          type: actions.ADD_ACCOUNT,\n          errors: err.response.data\n        }\n      })\n    })\n}\n\n// load all accounts\nexport const loadAccounts = () => dispatch => {\n  dispatch(accountsLoading());\n  axios.get('/accounts/all')\n    .then(res => {\n      dispatch({\n        type: actions.GET_ALL_ACCOUNTS,\n        payload: res.data\n      })\n    })\n    .catch(err => {\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: {\n          type: actions.GET_ALL_ACCOUNTS,\n          errors: err.response.data\n        }\n      })\n    })\n}\n\n// load account with id\nexport const loadAccount = (account_id) => dispatch => {\n  axios.get(`/accounts/load/${account_id}`)\n    .then(res => {\n      dispatch({\n        type: actions.LOAD_ACCOUNT,\n        payload: res.data\n      })\n    })\n    .catch(err => {\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: {\n          type: actions.LOAD_ACCOUNT,\n          errors: err.response.data\n        }\n      })\n    })\n}\n\n// update bank account\nexport const update_bankAccount = (account) => dispatch => {\n  dispatch(clearErrors());\n  dispatch(clearSuccess());\n\n  axios.post(`/accounts/update/${account.id}`, {account: account})\n    .then(res => {\n      dispatch({\n        type: actions.UPDATE_ACCOUNT,\n        payload: {\n          account_id: res.data.account_id,\n          updated_account: res.data.updated_account\n        }\n      })\n      dispatch({\n        type: actions.GET_SUCCESS,\n        payload: {\n          success_msg: res.data.success_msg,\n          type: actions.UPDATE_ACCOUNT\n        }\n      })\n    })\n    .catch(err => {\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: {\n          type: actions.UPDATE_ACCOUNT,\n          errors: err.response.data\n        }\n      })\n    })\n}\n\n// delete bank account\nexport const delete_bankAccount = (account_id) => dispatch => {\n  dispatch(clearErrors());\n  dispatch(clearSuccess());\n\n  axios.delete(`/accounts/delete/${account_id}`)\n    .then(res => {\n      dispatch({\n        type: actions.GET_SUCCESS,\n        payload: {\n          success_msg: res.data.success_msg,\n          type: actions.DELETE_ACCOUNT\n        }\n      })\n      dispatch({\n        type: actions.DELETE_ACCOUNT,\n        payload: res.data.account_id\n      })\n    })\n    .catch(err => {\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: {\n          type: actions.DELETE_ACCOUNT,\n          errors: err.response.data\n        }\n      })\n    })\n}\n\n// set accounts loading\nconst accountsLoading = () => dispatch => {\n  dispatch({\n    type: actions.GET_ACCOUNTS_LOADING\n  })\n}"]},"metadata":{},"sourceType":"module"}