{"ast":null,"code":"var _jsxFileName = \"/Users/trungvo/javascript-stack/smart-money/client/src/password-reset/Reset.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { resetPassword, updatePassword } from '../actions/usersActions';\nimport InputGroup from '../common/InputGroup';\nimport NavBar from '../layouts/NavBar';\nimport AlertMessage from '../common/AlertMessage';\nimport * as actions from '../actions/types';\nexport class Reset extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      password: '',\n      confirm_password: ''\n    };\n\n    this.onChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.onReset = e => {\n      e.preventDefault();\n      const user = this.props.user;\n      const _this$state = this.state,\n            password = _this$state.password,\n            confirm_password = _this$state.confirm_password;\n      this.props.updatePassword(user, password, confirm_password, this.props.history);\n    };\n  }\n\n  componentDidMount() {\n    this.props.resetPassword(this.props.match.params.token, this.props.history);\n  }\n\n  render() {\n    const _this$props = this.props,\n          user = _this$props.user,\n          errors = _this$props.errors,\n          success = _this$props.success;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(NavBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"row mb-5 ml-auto mr-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-md-6 m-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: \"/img/logo.png\",\n      className: \"mx-auto d-block\",\n      id: \"appLogo\",\n      alt: \"logo\",\n      width: \"200\",\n      height: \"200\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"card card-body shadow border-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"text-center mb-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-lock\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"\\xA0\"), \" Reset your password\"), errors.type !== actions.PASSWORD_RESET && typeof user !== 'undefined' && Object.keys(user).length > 0 && success.type === '' ? React.createElement(\"form\", {\n      onSubmit: this.onReset,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(InputGroup, {\n      htmlFor: \"password\",\n      label: \"New password\",\n      type: \"password\",\n      id: \"password\",\n      name: \"password\",\n      required: true,\n      onChange: this.onChange,\n      error: errors.type === actions.UPDATE_PASSWORD ? errors.errors.password : false,\n      placeholder: \"Enter new password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(InputGroup, {\n      htmlFor: \"password\",\n      label: \"Confirm new password\",\n      type: \"password\",\n      id: \"confirm_password\",\n      name: \"confirm_password\",\n      required: true,\n      onChange: this.onChange,\n      error: errors.type === actions.UPDATE_PASSWORD ? errors.errors.confirm_password : false,\n      placeholder: \"Confirm new password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      id: \"btn-sign-in\",\n      className: \"btn btn-primary btn-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"lead\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Update\"))) : success.type === actions.UPDATE_PASSWORD && success.success_msg !== '' ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(AlertMessage, {\n      variant: 'success',\n      message: success.success_msg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"lead\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: \"/users/login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Back to \", this.props.auth.isAuthenticated ? 'dashboard' : 'log in'))) : null))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors,\n  success: state.success,\n  user: state.users.user\n});\n\nexport default connect(mapStateToProps, {\n  resetPassword,\n  updatePassword\n})(Reset);","map":{"version":3,"sources":["/Users/trungvo/javascript-stack/smart-money/client/src/password-reset/Reset.js"],"names":["React","Component","connect","resetPassword","updatePassword","InputGroup","NavBar","AlertMessage","actions","Reset","state","password","confirm_password","onChange","e","setState","target","name","value","onReset","preventDefault","user","props","history","componentDidMount","match","params","token","render","errors","success","type","PASSWORD_RESET","Object","keys","length","UPDATE_PASSWORD","success_msg","auth","isAuthenticated","mapStateToProps","users"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {resetPassword, updatePassword} from '../actions/usersActions';\nimport InputGroup from '../common/InputGroup';\nimport NavBar from '../layouts/NavBar';\nimport AlertMessage from '../common/AlertMessage';\nimport * as actions from '../actions/types';\n\nexport class Reset extends Component {\n  state = {\n    password: '',\n    confirm_password: '',\n  }\n\n  componentDidMount() {\n    this.props.resetPassword(this.props.match.params.token, this.props.history);\n  }\n\n  onChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n\n  onReset = (e) => {\n    e.preventDefault();\n    const {user} = this.props;\n    const {password, confirm_password} = this.state;\n    this.props.updatePassword(user, password, confirm_password, this.props.history);\n  }\n\n  render() {\n    const {user, errors, success} = this.props;\n\n    return (\n      <div>\n        <NavBar/>\n        <div className=\"row mb-5 ml-auto mr-auto\">\n          <div className=\"col-md-6 m-auto\">\n            <img src=\"/img/logo.png\" className=\"mx-auto d-block\"\n              id=\"appLogo\" alt=\"logo\" width=\"200\" height=\"200\" />\n\n            <div className=\"card card-body shadow border-0\">\n              <h3 className=\"text-center mb-3\">\n                <i className=\"fas fa-lock\">&nbsp;</i> Reset your password\n              </h3>\n              \n              {\n                errors.type !== actions.PASSWORD_RESET \n                && typeof user !== 'undefined'\n                && Object.keys(user).length > 0\n                && success.type === '' ?\n\n                <form onSubmit={this.onReset}>\n                  \n                  <InputGroup htmlFor=\"password\"\n                    label=\"New password\"\n                    type=\"password\"\n                    id=\"password\"\n                    name=\"password\"\n                    required={true}\n                    onChange={this.onChange}\n                    error={\n                      errors.type === actions.UPDATE_PASSWORD ? errors.errors.password : false\n                    }\n                    placeholder=\"Enter new password\" />\n\n                  <InputGroup htmlFor=\"password\"\n                    label=\"Confirm new password\"\n                    type=\"password\"\n                    id=\"confirm_password\"\n                    name=\"confirm_password\"\n                    required={true}\n                    onChange={this.onChange}\n                    error={\n                      errors.type === actions.UPDATE_PASSWORD ? errors.errors.confirm_password : false\n                    }\n                    placeholder=\"Confirm new password\" />\n\n                  <button type=\"submit\" id=\"btn-sign-in\" className=\"btn btn-primary btn-block\">\n                    <span className='lead'>Update</span>\n                  </button>\n                </form>\n                :\n                (\n                  success.type === actions.UPDATE_PASSWORD && success.success_msg !== '' ?\n                      <div>\n                        <AlertMessage variant={'success'} message={success.success_msg} />\n\n                        <p className=\"lead\">\n                          <a href='/users/login'>\n                            Back to {this.props.auth.isAuthenticated ? 'dashboard' : 'log in'}\n                          </a>\n                        </p>\n                      </div> \n                      : null\n                )\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors,\n  success: state.success,\n  user: state.users.user\n})\n\nexport default connect(mapStateToProps, {resetPassword, updatePassword})(Reset);\n"]},"metadata":{},"sourceType":"module"}