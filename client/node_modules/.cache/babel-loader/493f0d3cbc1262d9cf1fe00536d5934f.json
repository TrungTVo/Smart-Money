{"ast":null,"code":"import _objectSpread from \"/Users/trungvo/javascript-stack/smart-money/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/trungvo/javascript-stack/smart-money/client/src/tools/DataTable.js\";\n// import * as React from 'react';\n// import currencyTypes from '../currencyTypes/currencyTypes';\n// import {\n//   PagingState,\n//   IntegratedPaging,\n//   DataTypeProvider,\n//   SearchState,\n//   IntegratedFiltering,\n//   EditingState\n// } from '@devexpress/dx-react-grid';\n// import {\n//   Grid, Table,\n//   TableHeaderRow, PagingPanel,\n//   SearchPanel, Toolbar,\n//   TableEditRow,\n//   TableEditColumn\n// } from '@devexpress/dx-react-grid-bootstrap4';\n// //import \"@devexpress/dx-react-grid-bootstrap4/dist/dx-react-grid-bootstrap4.css\";\n// const PaymentFormatter = (props) => {\n//   const {value, row} = props;\n//   const {currency} = row;\n//   return (\n//     <b style={{ color: value >= 0 ? 'green' : 'red' }}>\n//       {value >= 0 ? '+' : '-'}<small>{currency === 'USD' ? currencyTypes.usd : (currency === 'VND' ? currencyTypes.vnd : currencyTypes.eur)}</small>{Math.abs(value)}\n//     </b>\n//   );\n// }\n// const PaymentTypeProvider = props => {\n//   return (\n//     <DataTypeProvider\n//       formatterComponent={PaymentFormatter}\n//       {...props}\n//     />\n//   );\n// }\n// const BalanceFormatter = (props) => {\n//   const { value, row } = props;\n//   const { currency } = row;\n//   return (\n//     <b style={{ color: value >= 0 ? 'green' : 'red' }}>\n//       {value >= 0 ? '' : '-'}<small>{currency === 'USD' ? currencyTypes.usd : (currency === 'VND' ? currencyTypes.vnd : currencyTypes.eur)}</small>{Math.abs(value)}\n//     </b>\n//   );\n// }\n// const BalanceTypeProvider = props => (\n//   <DataTypeProvider\n//     formatterComponent={BalanceFormatter}\n//     {...props}\n//   />\n// );\n// const TableComponent = ({ ...restProps }) => (\n//   <Table.Table\n//     {...restProps}\n//     className=\"table-striped\"\n//   />\n// );\n// const getRowId = row => {return row.id};\n// class DataTable extends React.PureComponent {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       columns: [\n//         { name: 'date', title: 'Date' },\n//         { name: 'amount', title: 'Amount' },\n//         { name: 'category', title: 'Category' },\n//         { name: 'balance', title: 'Balance' },\n//         { name: 'currency', title: 'Currency' },\n//         { name: 'notes', title: 'Notes' },\n//         { name: 'payee', title: 'Payee' }\n//       ],\n//       tableColumnExtensions: [\n//         { columnName: 'date', align: 'center', width: 90 },\n//         { columnName: 'amount', align: 'right', width: 110 },\n//         { columnName: 'balance', align: 'right', width: 110 },\n//         { columnName: 'currency', align: 'right', width: 70 },\n//         { columnName: 'category', align: 'center', width: 130 },\n//         { columnName: 'notes', align: 'center', wordWrapEnabled: true, width: 350 },\n//         { columnName: 'payee', align: 'center', width: 180 }\n//       ],\n//       rows: [\n//         {\n//           id: 1,\n//           date: 'April 14, 2019',\n//           amount: 450,\n//           category: 'Bills',\n//           balance: 500,\n//           currency: 'VND',\n//           notes: '',\n//           payee: 'Trung Vo'\n//         },\n//         {\n//           id: 2,\n//           date: 'Jan 15, 2019',\n//           amount: -550,\n//           category: 'Groceries',\n//           balance: 1500,\n//           currency: 'EUR',\n//           notes: '',\n//           payee: 'Trung Vo'\n//         },\n//         {\n//           id: 3,\n//           date: 'Aug 16, 2019',\n//           amount: 250,\n//           category: 'Cars',\n//           balance: 500,\n//           currency: 'USD',\n//           notes: 'Short notes',\n//           payee: 'Trung Vo'\n//         },\n//         {\n//           id: 4,\n//           date: 'Feb 14, 2019',\n//           amount: -550,\n//           category: 'Tuition',\n//           balance: 500,\n//           currency: 'USD',\n//           notes: 'Short notes',\n//           payee: 'Trung Vo'\n//         },\n//         {\n//           id: 5,\n//           date: 'May 14, 2019',\n//           amount: 150,\n//           category: 'Drinks',\n//           balance: 500,\n//           currency: 'USD',\n//           notes: '',\n//           payee: 'Trung Vo'\n//         },\n//         {\n//           id: 6,\n//           date: 'May 14, 2019',\n//           amount: 150,\n//           category: 'Drinks',\n//           balance: 500,\n//           currency: 'USD',\n//           notes: '',\n//           payee: 'Trung Vo'\n//         },\n//         {\n//           id: 7,\n//           date: 'May 14, 2019',\n//           amount: -150,\n//           category: 'Drinks',\n//           balance: 500,\n//           currency: 'USD',\n//           notes: '',\n//           payee: 'Trung Vo'\n//         },\n//         {\n//           id: 8,\n//           date: 'May 14, 2019',\n//           amount: 150,\n//           category: 'Drinks',\n//           balance: 500,\n//           currency: 'USD',\n//           notes: '',\n//           payee: 'Trung Vo'\n//         },\n//         {\n//           id: 9,\n//           date: 'May 14, 2019',\n//           amount: 150,\n//           category: 'Drinks',\n//           balance: 500,\n//           currency: 'USD',\n//           notes: '',\n//           payee: 'Trung Vo'\n//         },\n//         {\n//           id: 10,\n//           date: 'May 14, 2019',\n//           amount: 150,\n//           category: 'Drinks',\n//           balance: 500,\n//           currency: 'USD',\n//           notes: '',\n//           payee: 'Trung Vo'\n//         }\n//       ],\n//       paymentColumns: ['amount'],\n//       balanceColumns: ['balance'],\n//       currentPage: 0,\n//       pageSize: 10,\n//       pageSizes: [10, 20, 30],\n//       searchValue: ''\n//     };\n//     this.changeCurrentPage = currentPage => this.setState({ currentPage });\n//     this.changePageSize = pageSize => this.setState({ pageSize });\n//     this.changeSearchValue = value => this.setState({ searchValue: value });\n//     this.commitChanges = this.commitChanges.bind(this);\n//   }\n//   commitChanges({ added, changed, deleted }) {\n//     let { rows } = this.state;\n//     if (added) {\n//       const startingAddedId = rows.length > 0 ? rows[rows.length - 1].id + 1 : 0;\n//       rows = [\n//         ...rows,\n//         ...added.map((row, index) => ({\n//           id: startingAddedId + index,\n//           ...row,\n//         })),\n//       ];\n//     }\n//     if (changed) {\n//       rows = rows.map(row => (changed[row.id] ? { ...row, ...changed[row.id] } : row));\n//     }\n//     if (deleted) {\n//       const deletedSet = new Set(deleted);\n//       rows = rows.filter(row => !deletedSet.has(row.id));\n//     }\n//     this.setState({ rows });\n//   }\n//   render() {\n//     const {\n//       rows, columns, tableColumnExtensions, searchValue,\n//       paymentColumns, balanceColumns, pageSize, pageSizes, currentPage,\n//     } = this.state;\n//     return (\n//       <Grid rows={rows} columns={columns} getRowId={getRowId} >\n//           <PagingState\n//             defaultCurrentPage={currentPage}\n//             onCurrentPageChange={this.changeCurrentPage}\n//             pageSize={pageSize}\n//             onPageSizeChange={this.changePageSize}\n//           />\n//           <PaymentTypeProvider\n//             for={paymentColumns}\n//           />\n//           <BalanceTypeProvider\n//             for={balanceColumns}\n//           />\n//           <SearchState\n//             value={searchValue}\n//             onValueChange={this.changeSearchValue}\n//           />\n//           <IntegratedFiltering />\n//           <Toolbar />\n//           <SearchPanel />\n//           <EditingState\n//             onCommitChanges={this.commitChanges}\n//           />\n//           <TableEditRow />\n//           <TableEditColumn\n//             showAddCommand\n//             showEditCommand\n//             showDeleteCommand\n//           />\n//           <IntegratedPaging />\n//           <Table columnExtensions={tableColumnExtensions} tableComponent={TableComponent} />\n//           <TableHeaderRow />\n//           <PagingPanel pageSizes={pageSizes} />\n//         </Grid>\n//     );\n//   }\n// }\n// export default DataTable;\nimport * as React from 'react';\nimport { EditingState } from '@devexpress/dx-react-grid';\nimport { Grid, Table, TableHeaderRow, TableEditRow, TableEditColumn } from '@devexpress/dx-react-grid-bootstrap4';\nimport { generateRows, defaultColumnValues } from '../demo-data/generator';\n\nconst getRowId = row => row.id;\n\nexport default class DataTable extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      columns: [{\n        name: 'name',\n        title: 'Name'\n      }, {\n        name: 'sex',\n        title: 'Sex'\n      }, {\n        name: 'city',\n        title: 'City'\n      }, {\n        name: 'car',\n        title: 'Car'\n      }],\n      rows: generateRows({\n        columnValues: _objectSpread({\n          id: ({\n            index\n          }) => index\n        }, defaultColumnValues),\n        length: 8\n      })\n    };\n    this.commitChanges = this.commitChanges.bind(this);\n  }\n\n  commitChanges({\n    added,\n    changed,\n    deleted\n  }) {\n    let rows = this.state.rows;\n\n    if (added) {\n      const startingAddedId = rows.length > 0 ? rows[rows.length - 1].id + 1 : 0;\n      rows = [...rows, ...added.map((row, index) => _objectSpread({\n        id: startingAddedId + index\n      }, row))];\n    }\n\n    if (changed) {\n      rows = rows.map(row => changed[row.id] ? _objectSpread({}, row, changed[row.id]) : row);\n    }\n\n    if (deleted) {\n      const deletedSet = new Set(deleted);\n      rows = rows.filter(row => !deletedSet.has(row.id));\n    }\n\n    this.setState({\n      rows\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          rows = _this$state.rows,\n          columns = _this$state.columns;\n    return React.createElement(\"div\", {\n      className: \"card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      rows: rows,\n      columns: columns,\n      getRowId: getRowId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, React.createElement(EditingState, {\n      onCommitChanges: this.commitChanges,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }), React.createElement(Table, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }), React.createElement(TableHeaderRow, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }), React.createElement(TableEditRow, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }), React.createElement(TableEditColumn, {\n      showAddCommand: true,\n      showEditCommand: true,\n      showDeleteCommand: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/trungvo/javascript-stack/smart-money/client/src/tools/DataTable.js"],"names":["React","EditingState","Grid","Table","TableHeaderRow","TableEditRow","TableEditColumn","generateRows","defaultColumnValues","getRowId","row","id","DataTable","PureComponent","constructor","props","state","columns","name","title","rows","columnValues","index","length","commitChanges","bind","added","changed","deleted","startingAddedId","map","deletedSet","Set","filter","has","setState","render"],"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","sourcesContent":["// import * as React from 'react';\n// import currencyTypes from '../currencyTypes/currencyTypes';\n// import {\n//   PagingState,\n//   IntegratedPaging,\n//   DataTypeProvider,\n//   SearchState,\n//   IntegratedFiltering,\n//   EditingState\n// } from '@devexpress/dx-react-grid';\n\n// import {\n//   Grid, Table,\n//   TableHeaderRow, PagingPanel,\n//   SearchPanel, Toolbar,\n//   TableEditRow,\n//   TableEditColumn\n// } from '@devexpress/dx-react-grid-bootstrap4';\n\n\n// //import \"@devexpress/dx-react-grid-bootstrap4/dist/dx-react-grid-bootstrap4.css\";\n\n// const PaymentFormatter = (props) => {\n//   const {value, row} = props;\n//   const {currency} = row;\n//   return (\n//     <b style={{ color: value >= 0 ? 'green' : 'red' }}>\n//       {value >= 0 ? '+' : '-'}<small>{currency === 'USD' ? currencyTypes.usd : (currency === 'VND' ? currencyTypes.vnd : currencyTypes.eur)}</small>{Math.abs(value)}\n//     </b>\n//   );\n// }\n\n// const PaymentTypeProvider = props => {\n//   return (\n//     <DataTypeProvider\n//       formatterComponent={PaymentFormatter}\n//       {...props}\n//     />\n//   );\n// }\n\n// const BalanceFormatter = (props) => {\n//   const { value, row } = props;\n//   const { currency } = row;\n//   return (\n//     <b style={{ color: value >= 0 ? 'green' : 'red' }}>\n//       {value >= 0 ? '' : '-'}<small>{currency === 'USD' ? currencyTypes.usd : (currency === 'VND' ? currencyTypes.vnd : currencyTypes.eur)}</small>{Math.abs(value)}\n//     </b>\n//   );\n// }\n\n// const BalanceTypeProvider = props => (\n//   <DataTypeProvider\n//     formatterComponent={BalanceFormatter}\n//     {...props}\n//   />\n// );\n\n// const TableComponent = ({ ...restProps }) => (\n//   <Table.Table\n//     {...restProps}\n//     className=\"table-striped\"\n//   />\n// );\n\n// const getRowId = row => {return row.id};\n\n// class DataTable extends React.PureComponent {\n//   constructor(props) {\n//     super(props);\n\n//     this.state = {\n//       columns: [\n//         { name: 'date', title: 'Date' },\n//         { name: 'amount', title: 'Amount' },\n//         { name: 'category', title: 'Category' },\n//         { name: 'balance', title: 'Balance' },\n//         { name: 'currency', title: 'Currency' },\n//         { name: 'notes', title: 'Notes' },\n//         { name: 'payee', title: 'Payee' }\n//       ],\n//       tableColumnExtensions: [\n//         { columnName: 'date', align: 'center', width: 90 },\n//         { columnName: 'amount', align: 'right', width: 110 },\n//         { columnName: 'balance', align: 'right', width: 110 },\n//         { columnName: 'currency', align: 'right', width: 70 },\n//         { columnName: 'category', align: 'center', width: 130 },\n//         { columnName: 'notes', align: 'center', wordWrapEnabled: true, width: 350 },\n//         { columnName: 'payee', align: 'center', width: 180 }\n//       ],\n//       rows: [\n//         {\n//           id: 1,\n//           date: 'April 14, 2019',\n//           amount: 450,\n//           category: 'Bills',\n//           balance: 500,\n//           currency: 'VND',\n//           notes: '',\n//           payee: 'Trung Vo'\n//         },\n//         {\n//           id: 2,\n//           date: 'Jan 15, 2019',\n//           amount: -550,\n//           category: 'Groceries',\n//           balance: 1500,\n//           currency: 'EUR',\n//           notes: '',\n//           payee: 'Trung Vo'\n//         },\n//         {\n//           id: 3,\n//           date: 'Aug 16, 2019',\n//           amount: 250,\n//           category: 'Cars',\n//           balance: 500,\n//           currency: 'USD',\n//           notes: 'Short notes',\n//           payee: 'Trung Vo'\n//         },\n//         {\n//           id: 4,\n//           date: 'Feb 14, 2019',\n//           amount: -550,\n//           category: 'Tuition',\n//           balance: 500,\n//           currency: 'USD',\n//           notes: 'Short notes',\n//           payee: 'Trung Vo'\n//         },\n//         {\n//           id: 5,\n//           date: 'May 14, 2019',\n//           amount: 150,\n//           category: 'Drinks',\n//           balance: 500,\n//           currency: 'USD',\n//           notes: '',\n//           payee: 'Trung Vo'\n//         },\n//         {\n//           id: 6,\n//           date: 'May 14, 2019',\n//           amount: 150,\n//           category: 'Drinks',\n//           balance: 500,\n//           currency: 'USD',\n//           notes: '',\n//           payee: 'Trung Vo'\n//         },\n//         {\n//           id: 7,\n//           date: 'May 14, 2019',\n//           amount: -150,\n//           category: 'Drinks',\n//           balance: 500,\n//           currency: 'USD',\n//           notes: '',\n//           payee: 'Trung Vo'\n//         },\n//         {\n//           id: 8,\n//           date: 'May 14, 2019',\n//           amount: 150,\n//           category: 'Drinks',\n//           balance: 500,\n//           currency: 'USD',\n//           notes: '',\n//           payee: 'Trung Vo'\n//         },\n//         {\n//           id: 9,\n//           date: 'May 14, 2019',\n//           amount: 150,\n//           category: 'Drinks',\n//           balance: 500,\n//           currency: 'USD',\n//           notes: '',\n//           payee: 'Trung Vo'\n//         },\n//         {\n//           id: 10,\n//           date: 'May 14, 2019',\n//           amount: 150,\n//           category: 'Drinks',\n//           balance: 500,\n//           currency: 'USD',\n//           notes: '',\n//           payee: 'Trung Vo'\n//         }\n//       ],\n//       paymentColumns: ['amount'],\n//       balanceColumns: ['balance'],\n//       currentPage: 0,\n//       pageSize: 10,\n//       pageSizes: [10, 20, 30],\n//       searchValue: ''\n//     };\n\n//     this.changeCurrentPage = currentPage => this.setState({ currentPage });\n//     this.changePageSize = pageSize => this.setState({ pageSize });\n//     this.changeSearchValue = value => this.setState({ searchValue: value });\n//     this.commitChanges = this.commitChanges.bind(this);\n//   }\n\n//   commitChanges({ added, changed, deleted }) {\n//     let { rows } = this.state;\n//     if (added) {\n//       const startingAddedId = rows.length > 0 ? rows[rows.length - 1].id + 1 : 0;\n//       rows = [\n//         ...rows,\n//         ...added.map((row, index) => ({\n//           id: startingAddedId + index,\n//           ...row,\n//         })),\n//       ];\n//     }\n//     if (changed) {\n//       rows = rows.map(row => (changed[row.id] ? { ...row, ...changed[row.id] } : row));\n//     }\n//     if (deleted) {\n//       const deletedSet = new Set(deleted);\n//       rows = rows.filter(row => !deletedSet.has(row.id));\n//     }\n//     this.setState({ rows });\n//   }\n\n//   render() {\n//     const {\n//       rows, columns, tableColumnExtensions, searchValue,\n//       paymentColumns, balanceColumns, pageSize, pageSizes, currentPage,\n//     } = this.state;\n  \n//     return (\n//       <Grid rows={rows} columns={columns} getRowId={getRowId} >\n//           <PagingState\n//             defaultCurrentPage={currentPage}\n//             onCurrentPageChange={this.changeCurrentPage}\n//             pageSize={pageSize}\n//             onPageSizeChange={this.changePageSize}\n//           />\n//           <PaymentTypeProvider\n//             for={paymentColumns}\n//           />\n//           <BalanceTypeProvider\n//             for={balanceColumns}\n//           />\n//           <SearchState\n//             value={searchValue}\n//             onValueChange={this.changeSearchValue}\n//           />\n//           <IntegratedFiltering />\n//           <Toolbar />\n//           <SearchPanel />\n\n//           <EditingState\n//             onCommitChanges={this.commitChanges}\n//           />\n\n//           <TableEditRow />\n//           <TableEditColumn\n//             showAddCommand\n//             showEditCommand\n//             showDeleteCommand\n//           />\n          \n\n//           <IntegratedPaging />\n//           <Table columnExtensions={tableColumnExtensions} tableComponent={TableComponent} />\n//           <TableHeaderRow />\n//           <PagingPanel pageSizes={pageSizes} />\n//         </Grid>\n//     );\n\n//   }\n// }\n\n// export default DataTable;\n\n\nimport * as React from 'react';\nimport { EditingState } from '@devexpress/dx-react-grid';\nimport {\n  Grid,\n  Table,\n  TableHeaderRow,\n  TableEditRow,\n  TableEditColumn,\n} from '@devexpress/dx-react-grid-bootstrap4';\n\nimport {\n  generateRows,\n  defaultColumnValues,\n} from '../demo-data/generator';\n\nconst getRowId = row => row.id;\n\nexport default class DataTable extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      columns: [\n        { name: 'name', title: 'Name' },\n        { name: 'sex', title: 'Sex' },\n        { name: 'city', title: 'City' },\n        { name: 'car', title: 'Car' },\n      ],\n      rows: generateRows({\n        columnValues: { id: ({ index }) => index, ...defaultColumnValues },\n        length: 8,\n      }),\n    };\n\n    this.commitChanges = this.commitChanges.bind(this);\n  }\n\n  commitChanges({ added, changed, deleted }) {\n    let { rows } = this.state;\n    if (added) {\n      const startingAddedId = rows.length > 0 ? rows[rows.length - 1].id + 1 : 0;\n      rows = [\n        ...rows,\n        ...added.map((row, index) => ({\n          id: startingAddedId + index,\n          ...row,\n        })),\n      ];\n    }\n    if (changed) {\n      rows = rows.map(row => (changed[row.id] ? { ...row, ...changed[row.id] } : row));\n    }\n    if (deleted) {\n      const deletedSet = new Set(deleted);\n      rows = rows.filter(row => !deletedSet.has(row.id));\n    }\n    this.setState({ rows });\n  }\n\n  render() {\n    const { rows, columns } = this.state;\n\n    return (\n      <div className=\"card\">\n        <Grid\n          rows={rows}\n          columns={columns}\n          getRowId={getRowId}\n        >\n          <EditingState\n            onCommitChanges={this.commitChanges}\n          />\n          <Table />\n          <TableHeaderRow />\n          <TableEditRow />\n          <TableEditColumn\n            showAddCommand\n            showEditCommand\n            showDeleteCommand\n          />\n        </Grid>\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}