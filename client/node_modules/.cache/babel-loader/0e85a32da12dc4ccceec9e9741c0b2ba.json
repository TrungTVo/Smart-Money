{"ast":null,"code":"import axios from 'axios';\nimport * as actions from './types';\nimport { clearErrors, clearSuccess } from './clearErrSuccess';\nimport { loadAccounts, loadAccount } from './accountActions'; // load all transactions\n\nexport const loadTransactions = account_id => dispatch => {\n  dispatch(transactionsLoading());\n  dispatch(loadAccount(account_id));\n  axios.get(\"/accounts/\".concat(account_id, \"/transactions/all\")).then(res => {\n    dispatch({\n      type: actions.GET_ALL_TRANSACTIONS,\n      payload: {\n        transactions: res.data.transactions,\n        account: res.data.account\n      }\n    });\n  }).catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: {\n        type: actions.GET_ALL_TRANSACTIONS,\n        errors: err.response.data\n      }\n    });\n  });\n}; // add new transaction\n\nexport const addTransaction = transaction => dispatch => {\n  dispatch(clearErrors());\n  dispatch(clearSuccess());\n  dispatch(loadAccount(transaction.bankAccount._id));\n  axios.post(\"/accounts/\".concat(transaction.bankAccount._id, \"/transactions/add\"), transaction).then(res => {\n    dispatch({\n      type: actions.ADD_TRANSACTION,\n      payload: {\n        transaction: res.data.new_transaction,\n        account: res.data.account\n      }\n    });\n    dispatch({\n      type: actions.GET_SUCCESS,\n      payload: {\n        success_msg: res.data.success_msg,\n        type: actions.ADD_TRANSACTION,\n        account: transaction.bankAccount.name\n      }\n    });\n  }) // .then(() => {\n  //   dispatch(loadAccounts());\n  // })\n  .catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: {\n        type: actions.ADD_TRANSACTION,\n        errors: err.response.data\n      }\n    });\n  });\n}; // update transaction\n\nexport const update_transaction = transaction => dispatch => {\n  dispatch(clearErrors());\n  dispatch(clearSuccess());\n  dispatch(loadAccount(transaction.bankAccount._id));\n  axios.post(\"/accounts/\".concat(transaction.bankAccount._id, \"/transactions/update\"), transaction).then(res => {\n    dispatch({\n      type: actions.UPDATE_TRANSACTION,\n      payload: {\n        updated_transaction: res.data.updated_transaction,\n        updated_account: res.data.updated_account\n      }\n    });\n    dispatch({\n      type: actions.GET_SUCCESS,\n      payload: {\n        success_msg: res.data.success_msg,\n        type: actions.UPDATE_TRANSACTION,\n        account: transaction.bankAccount.name\n      }\n    });\n  }).then(() => {\n    dispatch(loadAccounts());\n  }).catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: {\n        type: actions.UPDATE_TRANSACTION,\n        errors: err.response.data\n      }\n    });\n  });\n}; // delete transaction\n\nexport const delete_transaction = (bankAccount, transaction) => dispatch => {\n  dispatch(clearErrors());\n  dispatch(clearSuccess());\n  dispatch(loadAccount(bankAccount._id));\n  dispatch(transactionsLoading());\n  axios.post(\"/accounts/\".concat(bankAccount._id, \"/transactions/delete/\").concat(transaction._id), {\n    transaction_amount: transaction.amount\n  }).then(res => {\n    dispatch({\n      type: actions.DELETE_TRANSACTION,\n      payload: {\n        account: res.data.account,\n        transaction_id: transaction._id\n      }\n    });\n    dispatch({\n      type: actions.GET_SUCCESS,\n      payload: {\n        success_msg: res.data.success_msg,\n        type: actions.DELETE_TRANSACTION,\n        account: bankAccount.name\n      }\n    });\n  }) // .then(() => {\n  //   dispatch(loadAccounts());\n  // })\n  .catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: {\n        type: actions.DELETE_TRANSACTION,\n        errors: err.response.data\n      }\n    });\n  });\n}; // set transactions loading\n\nconst transactionsLoading = () => dispatch => {\n  dispatch({\n    type: actions.GET_TRANSACTIONS_LOADING\n  });\n};","map":{"version":3,"sources":["/Users/trungvo/javascript-stack/smart-money/client/src/actions/transactionActions.js"],"names":["axios","actions","clearErrors","clearSuccess","loadAccounts","loadAccount","loadTransactions","account_id","dispatch","transactionsLoading","get","then","res","type","GET_ALL_TRANSACTIONS","payload","transactions","data","account","catch","err","GET_ERRORS","errors","response","addTransaction","transaction","bankAccount","_id","post","ADD_TRANSACTION","new_transaction","GET_SUCCESS","success_msg","name","update_transaction","UPDATE_TRANSACTION","updated_transaction","updated_account","delete_transaction","transaction_amount","amount","DELETE_TRANSACTION","transaction_id","GET_TRANSACTIONS_LOADING"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport * as actions from './types';\nimport { clearErrors, clearSuccess } from './clearErrSuccess';\nimport {loadAccounts, loadAccount} from './accountActions';\n\n// load all transactions\nexport const loadTransactions = (account_id) => dispatch => {\n  dispatch(transactionsLoading());\n  dispatch(loadAccount(account_id));\n\n  axios.get(`/accounts/${account_id}/transactions/all`)\n    .then(res => {\n      dispatch({\n        type: actions.GET_ALL_TRANSACTIONS,\n        payload: {\n          transactions: res.data.transactions,\n          account: res.data.account\n        }\n      })\n    })\n    .catch(err => {\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: {\n          type: actions.GET_ALL_TRANSACTIONS,\n          errors: err.response.data\n        }\n      })\n    })\n}\n\n// add new transaction\nexport const addTransaction = (transaction) => dispatch => {\n  dispatch(clearErrors());\n  dispatch(clearSuccess());\n  dispatch(loadAccount(transaction.bankAccount._id));\n  \n  axios.post(`/accounts/${transaction.bankAccount._id}/transactions/add`, transaction)\n    .then(res => {\n      dispatch({\n        type: actions.ADD_TRANSACTION,\n        payload: {\n          transaction: res.data.new_transaction,\n          account: res.data.account\n        }\n      })\n      dispatch({\n        type: actions.GET_SUCCESS,\n        payload: {\n          success_msg: res.data.success_msg,\n          type: actions.ADD_TRANSACTION,\n          account: transaction.bankAccount.name\n        }\n      })\n    })\n    // .then(() => {\n    //   dispatch(loadAccounts());\n    // })\n    .catch(err => {\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: {\n          type: actions.ADD_TRANSACTION,\n          errors: err.response.data\n        }\n      })\n    })\n}\n\n// update transaction\nexport const update_transaction = (transaction) => dispatch => {\n  dispatch(clearErrors());\n  dispatch(clearSuccess());\n  dispatch(loadAccount(transaction.bankAccount._id));\n\n  axios.post(`/accounts/${transaction.bankAccount._id}/transactions/update`, transaction)\n    .then(res => {\n      dispatch({\n        type: actions.UPDATE_TRANSACTION,\n        payload: {\n          updated_transaction: res.data.updated_transaction,\n          updated_account: res.data.updated_account\n        }\n      })\n      dispatch({\n        type: actions.GET_SUCCESS,\n        payload: {\n          success_msg: res.data.success_msg,\n          type: actions.UPDATE_TRANSACTION,\n          account: transaction.bankAccount.name\n        }\n      })\n    })\n    .then(() => {\n      dispatch(loadAccounts());\n    })\n    .catch(err => {\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: {\n          type: actions.UPDATE_TRANSACTION,\n          errors: err.response.data\n        }\n      })\n    })\n}\n\n// delete transaction\nexport const delete_transaction = (bankAccount, transaction) => dispatch => {\n  dispatch(clearErrors());\n  dispatch(clearSuccess());\n  dispatch(loadAccount(bankAccount._id));\n  dispatch(transactionsLoading());\n\n  axios.post(`/accounts/${bankAccount._id}/transactions/delete/${transaction._id}`, {transaction_amount: transaction.amount})\n    .then(res => {\n      dispatch({\n        type: actions.DELETE_TRANSACTION,\n        payload: {\n          account: res.data.account,\n          transaction_id: transaction._id\n        }\n      })\n      dispatch({\n        type: actions.GET_SUCCESS,\n        payload: {\n          success_msg: res.data.success_msg,\n          type: actions.DELETE_TRANSACTION,\n          account: bankAccount.name\n        }\n      })\n    })\n    // .then(() => {\n    //   dispatch(loadAccounts());\n    // })\n    .catch(err => {\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: {\n          type: actions.DELETE_TRANSACTION,\n          errors: err.response.data\n        }\n      })\n    })\n}\n\n\n// set transactions loading\nconst transactionsLoading = () => dispatch => {\n  dispatch({\n    type: actions.GET_TRANSACTIONS_LOADING\n  })\n}\n"]},"metadata":{},"sourceType":"module"}