{"ast":null,"code":"import axios from 'axios';\nimport * as actions from './types';\nimport jwt_decode from 'jwt-decode'; // register new user\n\nexport const createUser = (newUser, history) => dispatch => {\n  axios.post('/users/register', newUser).then(res => {\n    dispatch({\n      type: actions.ADD_USER,\n      payload: res.data.newUser\n    });\n    history.push({\n      pathname: '/users/login',\n      state: {\n        success: true\n      }\n    });\n  }).catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // login with email and password\n\nexport const loginUser = user => dispatch => {\n  axios.post('/users/login', user).then(res => {\n    //console.log(res);\n    // save token to localstorage\n    localStorage.setItem('jwtToken', res.data.token); // Set token to Auth header\n\n    if (res.data.token) {\n      // Apply to every request\n      axios.defaults.headers.common['Authorization'] = res.data.token;\n    } else {\n      // Delete auth header\n      delete axios.defaults.headers.common['Authorization'];\n    } // Decode token to get user data\n\n\n    const decoded = jwt_decode(res.data.token); // Set current user\n\n    dispatch({\n      type: actions.SET_CURRENT_USER,\n      payload: decoded\n    });\n  }).catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // Login with Google\n\nexport const googleSignIn = tokenObj => dispatch => {\n  var token = tokenObj.id_token; // decoded user info with JWT token\n\n  var decoded = jwt_decode(token); // set user\n\n  const user = {\n    name: decoded.name,\n    email: decoded.email,\n    imageUrl: decoded.picture // call POST request\n\n  };\n  axios.post('/users/googleLogin', user).then(res => {\n    // save token to localstorage\n    localStorage.setItem('jwtToken', res.data.token); // Apply to every request\n\n    axios.defaults.headers.common['Authorization'] = res.data.token; // decoded user info with JWT token\n\n    var decoded = jwt_decode(res.data.token); // Set current user\n\n    dispatch({\n      type: actions.SET_CURRENT_USER,\n      payload: decoded\n    });\n  }).catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from localStorage\n  localStorage.removeItem('jwtToken'); // Remove auth header for future requests\n  // Delete auth header\n\n  delete axios.defaults.headers.common['Authorization']; // Set current user to {} which will set isAuthenticated to false\n\n  dispatch({\n    type: actions.SET_CURRENT_USER,\n    payload: {}\n  });\n}; // verify email before reset user password\n\nexport const verifyEmail = email => dispatch => {\n  dispatch(clearErrors());\n  dispatch(clearSuccess());\n  axios.post('/users/verify', {\n    email: email\n  }).then(res => {\n    dispatch({\n      type: actions.GET_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // reset user password\n\nexport const resetPassword = (token, history) => dispatch => {\n  axios.get(\"/users/reset/\".concat(token)).then(res => {\n    history.push(\"/users/reset/\".concat(token));\n  }).catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: err.response.data\n    });\n    history.push('/users/forgot');\n  });\n}; // Clear errors\n\nexport const clearErrors = () => {\n  return {\n    type: actions.CLEAR_ERRORS\n  };\n}; // Clear success\n\nexport const clearSuccess = () => {\n  return {\n    type: actions.CLEAR_SUCCESS\n  };\n};","map":{"version":3,"sources":["/Users/trungvo/javascript-stack/smart-money/client/src/actions/usersActions.js"],"names":["axios","actions","jwt_decode","createUser","newUser","history","dispatch","post","then","res","type","ADD_USER","payload","data","push","pathname","state","success","catch","err","GET_ERRORS","response","loginUser","user","localStorage","setItem","token","defaults","headers","common","decoded","SET_CURRENT_USER","googleSignIn","tokenObj","id_token","name","email","imageUrl","picture","logoutUser","removeItem","verifyEmail","clearErrors","clearSuccess","GET_SUCCESS","resetPassword","get","CLEAR_ERRORS","CLEAR_SUCCESS"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport * as actions from './types';\nimport jwt_decode from 'jwt-decode';\n\n// register new user\nexport const createUser = (newUser, history) => dispatch => {\n  axios.post('/users/register', newUser)\n    .then(res => {\n      dispatch({\n        type: actions.ADD_USER,\n        payload: res.data.newUser\n      })\n      history.push({\n        pathname: '/users/login',\n        state: {success: true}\n      });\n    })\n    .catch(err => {\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: err.response.data\n      })\n    })\n};\n\n// login with email and password\nexport const loginUser = (user) => dispatch => {\n  axios.post('/users/login', user)\n    .then(res => {\n      //console.log(res);\n      // save token to localstorage\n      localStorage.setItem('jwtToken', res.data.token);\n      // Set token to Auth header\n      if (res.data.token) {\n        // Apply to every request\n        axios.defaults.headers.common['Authorization'] = res.data.token;\n      } else {\n        // Delete auth header\n        delete axios.defaults.headers.common['Authorization'];\n      }\n      // Decode token to get user data\n      const decoded = jwt_decode(res.data.token);\n      // Set current user\n      dispatch({\n        type: actions.SET_CURRENT_USER,\n        payload: decoded\n      })\n    })\n    .catch(err => {\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: err.response.data\n      })\n    })\n}\n\n// Login with Google\nexport const googleSignIn = (tokenObj) => dispatch => {\n  var token = tokenObj.id_token;\n  // decoded user info with JWT token\n  var decoded = jwt_decode(token);\n  \n  // set user\n  const user = {\n    name: decoded.name,\n    email: decoded.email,\n    imageUrl: decoded.picture\n  }\n  // call POST request\n  axios.post('/users/googleLogin', user)\n    .then(res => {\n      // save token to localstorage\n      localStorage.setItem('jwtToken', res.data.token);\n      // Apply to every request\n      axios.defaults.headers.common['Authorization'] = res.data.token;\n      // decoded user info with JWT token\n      var decoded = jwt_decode(res.data.token);\n      // Set current user\n      dispatch({\n        type: actions.SET_CURRENT_USER,\n        payload: decoded\n      })\n    })\n    .catch(err => {\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: err.response.data\n      })\n    })\n};\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n  // Remove token from localStorage\n  localStorage.removeItem('jwtToken');\n  // Remove auth header for future requests\n  // Delete auth header\n  delete axios.defaults.headers.common['Authorization'];\n  // Set current user to {} which will set isAuthenticated to false\n  dispatch({\n    type: actions.SET_CURRENT_USER,\n    payload: {}\n  })\n};\n\n// verify email before reset user password\nexport const verifyEmail = (email) => dispatch => {\n  dispatch(clearErrors());\n  dispatch(clearSuccess());\n\n  axios.post('/users/verify', {email: email})\n    .then(res => {\n      dispatch({\n        type: actions.GET_SUCCESS,\n        payload: res.data\n      })\n    })\n    .catch(err => {\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: err.response.data\n      })\n    });\n};\n\n// reset user password\nexport const resetPassword = (token, history) => dispatch => {\n  axios.get(`/users/reset/${token}`)\n    .then(res => {\n      history.push(`/users/reset/${token}`);\n    })\n    .catch(err => {\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: err.response.data\n      })\n      history.push('/users/forgot');\n    })\n}\n\n// Clear errors\nexport const clearErrors = () => {\n  return {\n    type: actions.CLEAR_ERRORS\n  };\n};\n\n// Clear success\nexport const clearSuccess = () => {\n  return {\n    type: actions.CLEAR_SUCCESS\n  };\n};"]},"metadata":{},"sourceType":"module"}