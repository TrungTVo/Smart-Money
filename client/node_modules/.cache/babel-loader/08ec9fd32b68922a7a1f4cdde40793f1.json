{"ast":null,"code":"var _jsxFileName = \"/Users/trungvo/javascript-stack/smart-money/client/src/common/charts/MyChart.js\";\nimport React, { Component } from 'react';\nimport Chart from \"chart.js\";\nimport { connect } from 'react-redux';\nimport { analysis } from '../../actions/dataAnalysis';\nimport randomColor from '../randomColors';\nimport CanvasJSReact from '../../assets/canvasjs.react';\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nclass MyChart extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      window_width: window.innerWidth\n    };\n    this.chartRef = React.createRef();\n\n    this.buildChart = () => {\n      const window_width = this.state.window_width;\n      const _this$props = this.props,\n            type = _this$props.type,\n            position = _this$props.position,\n            dataAnalysis = _this$props.dataAnalysis;\n      window.addEventListener('resize', () => {\n        this.setState({\n          window_width: window.innerWidth\n        });\n      });\n      const myChartRef = this.chartRef.current.getContext(\"2d\");\n      new Chart(myChartRef, {\n        type: type,\n        data: {\n          labels: !dataAnalysis.analyzing ? dataAnalysis.categories : [],\n          datasets: [{\n            data: !dataAnalysis.analyzing ? dataAnalysis.data : [],\n            backgroundColor: randomColor(!dataAnalysis.analyzing ? dataAnalysis.categories.length : 0)\n          }]\n        },\n        options: {\n          title: {\n            text: 'Chart',\n            display: true\n          },\n          //responsive: true,\n          legend: {\n            display: true,\n            position: window_width > 945 ? type === 'pie' || type === 'doughnut' ? 'right' : position : 'bottom',\n            labels: {\n              boxWidth: window_width < 600 ? 15 : 40,\n              generateLabels: function (chart) {\n                var data = chart.data;\n\n                if (data.labels.length && data.datasets.length) {\n                  if (type !== 'line') {\n                    return data.labels.map(function (label, i) {\n                      return {\n                        text: label + ': ' + data.datasets[0].data[i],\n                        fillStyle: data.datasets[0].backgroundColor[i],\n                        index: i\n                      };\n                    });\n                  } else {\n                    return data.datasets.map(function (kind, i) {\n                      return {\n                        text: kind.label,\n                        fillStyle: kind.borderColor\n                      };\n                    });\n                  }\n                }\n\n                return [];\n              }\n            }\n          }\n        }\n      });\n    };\n  }\n\n  componentDidMount() {}\n\n  componentWillReceiveProps(nextProps) {\n    const accounts = nextProps.accounts,\n          transactions = nextProps.transactions;\n\n    if (!accounts.loading && !transactions.loading && Object.keys(accounts.account).length > 0 && Object.keys(transactions.account).length > 0) {// this.props.analysis(accounts, transactions);\n    }\n  }\n\n  render() {\n    const window_width = this.state.window_width;\n    const _this$props2 = this.props,\n          type = _this$props2.type,\n          dataAnalysis = _this$props2.dataAnalysis;\n    const options = {\n      animationEnabled: true,\n      title: {\n        text: \"Customer Satisfaction\"\n      },\n      subtitles: [{\n        text: \"71% Positive\",\n        verticalAlign: \"center\",\n        fontSize: 24,\n        dockInsidePlotArea: true\n      }],\n      data: [{\n        type: \"doughnut\",\n        showInLegend: true,\n        indexLabel: \"{name}: {y}\",\n        yValueFormatString: \"#,###'%'\",\n        dataPoints: [{\n          name: \"Unsatisfied\",\n          y: 5\n        }, {\n          name: \"Very Unsatisfied\",\n          y: 31\n        }, {\n          name: \"Very Satisfied\",\n          y: 40\n        }, {\n          name: \"Satisfied\",\n          y: 17\n        }, {\n          name: \"Neutral\",\n          y: 7\n        }]\n      }]\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, dataAnalysis.analyzing ? React.createElement(\"div\", {\n      className: \"d-flex justify-content-center mb-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"spinner-border\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Loading...\"))) : // <canvas\n    //   id=\"myChart\"\n    //   style={{ height: window_width < 350 ? (type === 'pie' ? '300vh' : '350vh') : (type === 'horizontalBar' ? '350vh' : '250vh'), width: '400vw' }}\n    //   ref={this.chartRef}\n    // />\n    React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"React Doughnut Chart\"), React.createElement(CanvasJSChart, {\n      options: options\n      /* onRef={ref => this.chart = ref} */\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  errors: state.errors,\n  accounts: state.accounts,\n  transactions: state.transactions,\n  dataAnalysis: state.dataAnalysis\n});\n\nexport default connect(mapStateToProps, {\n  analysis\n})(MyChart);","map":{"version":3,"sources":["/Users/trungvo/javascript-stack/smart-money/client/src/common/charts/MyChart.js"],"names":["React","Component","Chart","connect","analysis","randomColor","CanvasJSReact","CanvasJSChart","MyChart","state","window_width","window","innerWidth","chartRef","createRef","buildChart","props","type","position","dataAnalysis","addEventListener","setState","myChartRef","current","getContext","data","labels","analyzing","categories","datasets","backgroundColor","length","options","title","text","display","legend","boxWidth","generateLabels","chart","map","label","i","fillStyle","index","kind","borderColor","componentDidMount","componentWillReceiveProps","nextProps","accounts","transactions","loading","Object","keys","account","render","animationEnabled","subtitles","verticalAlign","fontSize","dockInsidePlotArea","showInLegend","indexLabel","yValueFormatString","dataPoints","name","y","mapStateToProps","errors"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Chart from \"chart.js\";\nimport {connect} from 'react-redux';\nimport { analysis} from '../../actions/dataAnalysis';\nimport randomColor from '../randomColors';\n\nimport CanvasJSReact from '../../assets/canvasjs.react';\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nclass MyChart extends Component {\n  state = {\n    window_width: window.innerWidth\n  }\n  chartRef = React.createRef();\n\n  componentDidMount() {\n    \n  }\n\n  componentWillReceiveProps(nextProps) {\n    const {accounts, transactions} = nextProps;\n    \n    if (!accounts.loading && !transactions.loading\n      && Object.keys(accounts.account).length > 0 && Object.keys(transactions.account).length > 0 ) {\n\n      // this.props.analysis(accounts, transactions);\n    }\n  }\n\n  buildChart = () => {\n    const {window_width} = this.state;\n    const { type, position, dataAnalysis} = this.props;\n\n    window.addEventListener('resize', () => {\n      this.setState({ window_width: window.innerWidth  })\n    });\n\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\n\n    new Chart(myChartRef, {\n      type: type,\n      data: {\n        labels: !dataAnalysis.analyzing ? dataAnalysis.categories : [],\n        datasets: [\n          {\n            data: !dataAnalysis.analyzing ? dataAnalysis.data : [],\n            backgroundColor: randomColor(!dataAnalysis.analyzing ? dataAnalysis.categories.length : 0)\n          }\n        ]\n      },\n      options: {\n        title: {\n          text: 'Chart',\n          display: true\n        },\n        //responsive: true,\n        legend: {\n          display: true,\n          position: window_width > 945 ? (type === 'pie' || type ==='doughnut' ? 'right' : position) : 'bottom',\n          labels: {\n            boxWidth: window_width < 600 ? 15 : 40,\n            generateLabels: function(chart) {\n              var data = chart.data;\n              if (data.labels.length && data.datasets.length) {\n                if (type !== 'line') {\n                  return data.labels.map(function (label, i) {\n                    return {\n                      text: label + ': ' + data.datasets[0].data[i],\n                      fillStyle: data.datasets[0].backgroundColor[i],\n                      index: i\n                    };\n                  });\n                } else {\n                  return data.datasets.map(function(kind, i) {\n                    return {\n                      text: kind.label,\n                      fillStyle: kind.borderColor\n                    }\n                  })\n                }\n              }\n              return [];\n            }\n          }\n        }\n      }\n    });\n  }\n  render() {\n    const {window_width} = this.state;\n    const { type, dataAnalysis } = this.props;\n\n    const options = {\n      animationEnabled: true,\n      title: {\n        text: \"Customer Satisfaction\"\n      },\n      subtitles: [{\n        text: \"71% Positive\",\n        verticalAlign: \"center\",\n        fontSize: 24,\n        dockInsidePlotArea: true\n      }],\n      data: [{\n        type: \"doughnut\",\n        showInLegend: true,\n        indexLabel: \"{name}: {y}\",\n        yValueFormatString: \"#,###'%'\",\n        dataPoints: [\n          { name: \"Unsatisfied\", y: 5 },\n          { name: \"Very Unsatisfied\", y: 31 },\n          { name: \"Very Satisfied\", y: 40 },\n          { name: \"Satisfied\", y: 17 },\n          { name: \"Neutral\", y: 7 }\n        ]\n      }]\n    }\n\n    return (\n      <div>\n        {\n          dataAnalysis.analyzing ? \n            <div className=\"d-flex justify-content-center mb-4\">\n              <div className=\"spinner-border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n              </div>\n            </div>\n          : \n            // <canvas\n            //   id=\"myChart\"\n            //   style={{ height: window_width < 350 ? (type === 'pie' ? '300vh' : '350vh') : (type === 'horizontalBar' ? '350vh' : '250vh'), width: '400vw' }}\n            //   ref={this.chartRef}\n            // />\n            <div>\n              <h1>React Doughnut Chart</h1>\n              <CanvasJSChart options={options}\n              /* onRef={ref => this.chart = ref} */\n              />\n            </div>\n        }\n        \n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  errors: state.errors,\n  accounts: state.accounts,\n  transactions: state.transactions,\n  dataAnalysis: state.dataAnalysis\n}) \n\nexport default connect(mapStateToProps, {analysis})(MyChart);"]},"metadata":{},"sourceType":"module"}