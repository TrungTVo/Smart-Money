{"ast":null,"code":"var _jsxFileName = \"/Users/trungvo/javascript-stack/smart-money/client/src/common/charts/PieChart.js\";\nimport React, { Component } from 'react';\nimport Chart from \"chart.js\";\nexport default class PieChart extends Component {\n  constructor(...args) {\n    super(...args);\n    this.chartRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\n    new Chart(myChartRef, {\n      type: \"doughnut\",\n      data: {\n        //Bring in data\n        labels: [\"Red\", \"Yellow\", \"Blue\"],\n        datasets: [{\n          data: [8, 67, 91],\n          backgroundColor: ['red', 'yellow', 'blue']\n        }]\n      },\n      options: {\n        //Customize chart options\n        legend: {\n          position: 'right',\n          labels: {\n            generateLabels: function (chart) {\n              var data = chart.data;\n\n              if (data.labels.length && data.datasets.length) {\n                return data.labels.map(function (label, i) {\n                  var meta = chart.getDatasetMeta(0);\n\n                  if (label === 'Red') {\n                    console.log('Red ' + meta);\n                  } else if (label === ' Yellow') {\n                    console.log('Yellow ' + meta);\n                  } else {\n                    console.log('Blue ' + meta);\n                  }\n\n                  return {\n                    text: label,\n                    fillStyle: 'black',\n                    // strokeStyle: style.borderColor,\n                    // lineWidth: style.borderWidth,\n                    // hidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,\n                    // Extra data used for toggling the correct item\n                    index: i\n                  };\n                });\n              }\n\n              return [];\n            }\n          }\n        }\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"myChart\",\n      ref: this.chartRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/trungvo/javascript-stack/smart-money/client/src/common/charts/PieChart.js"],"names":["React","Component","Chart","PieChart","chartRef","createRef","componentDidMount","myChartRef","current","getContext","type","data","labels","datasets","backgroundColor","options","legend","position","generateLabels","chart","length","map","label","i","meta","getDatasetMeta","console","log","text","fillStyle","index","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,eAAe,MAAMC,QAAN,SAAuBF,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAC9CG,QAD8C,GACnCJ,KAAK,CAACK,SAAN,EADmC;AAAA;;AAG9CC,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,UAAU,GAAG,KAAKH,QAAL,CAAcI,OAAd,CAAsBC,UAAtB,CAAiC,IAAjC,CAAnB;AAEA,QAAIP,KAAJ,CAAUK,UAAV,EAAsB;AACpBG,MAAAA,IAAI,EAAE,UADc;AAEpBC,MAAAA,IAAI,EAAE;AACJ;AACAC,QAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,QAAR,EAAkB,MAAlB,CAFJ;AAGJC,QAAAA,QAAQ,EAAE,CACR;AAACF,UAAAA,IAAI,EAAE,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,CAAP;AAAoBG,UAAAA,eAAe,EAAE,CAAC,KAAD,EAAQ,QAAR,EAAkB,MAAlB;AAArC,SADQ;AAHN,OAFc;AASpBC,MAAAA,OAAO,EAAE;AACP;AACAC,QAAAA,MAAM,EAAE;AACNC,UAAAA,QAAQ,EAAE,OADJ;AAENL,UAAAA,MAAM,EAAE;AACNM,YAAAA,cAAc,EAAE,UAASC,KAAT,EAAgB;AAC9B,kBAAIR,IAAI,GAAGQ,KAAK,CAACR,IAAjB;;AACA,kBAAIA,IAAI,CAACC,MAAL,CAAYQ,MAAZ,IAAsBT,IAAI,CAACE,QAAL,CAAcO,MAAxC,EAAgD;AAC9C,uBAAOT,IAAI,CAACC,MAAL,CAAYS,GAAZ,CAAgB,UAAUC,KAAV,EAAiBC,CAAjB,EAAoB;AACzC,sBAAIC,IAAI,GAAGL,KAAK,CAACM,cAAN,CAAqB,CAArB,CAAX;;AACA,sBAAIH,KAAK,KAAK,KAAd,EAAqB;AACnBI,oBAAAA,OAAO,CAACC,GAAR,CAAY,SAASH,IAArB;AACD,mBAFD,MAEO,IAAIF,KAAK,KAAI,SAAb,EAAwB;AAC7BI,oBAAAA,OAAO,CAACC,GAAR,CAAY,YAAYH,IAAxB;AACD,mBAFM,MAEA;AACLE,oBAAAA,OAAO,CAACC,GAAR,CAAY,UAAUH,IAAtB;AACD;;AACD,yBAAO;AACLI,oBAAAA,IAAI,EAAEN,KADD;AAELO,oBAAAA,SAAS,EAAE,OAFN;AAGL;AACA;AACA;AAEA;AACAC,oBAAAA,KAAK,EAAEP;AARF,mBAAP;AAUD,iBAnBM,CAAP;AAoBD;;AACD,qBAAO,EAAP;AACD;AA1BK;AAFF;AAFD;AATW,KAAtB;AA4CD;;AACDQ,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,EAAE,EAAC,SADL;AAEE,MAAA,GAAG,EAAE,KAAK3B,QAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAQD;;AA5D6C","sourcesContent":["import React, { Component } from 'react'\nimport Chart from \"chart.js\";\n\nexport default class PieChart extends Component {\n  chartRef = React.createRef();\n\n  componentDidMount() {\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\n\n    new Chart(myChartRef, {\n      type: \"doughnut\",\n      data: {\n        //Bring in data\n        labels: [\"Red\", \"Yellow\", \"Blue\"],\n        datasets: [\n          {data: [8, 67, 91], backgroundColor: ['red', 'yellow', 'blue']}\n        ]\n      },\n      options: {\n        //Customize chart options\n        legend: {\n          position: 'right',\n          labels: {\n            generateLabels: function(chart) {\n              var data = chart.data;\n              if (data.labels.length && data.datasets.length) {\n                return data.labels.map(function (label, i) {\n                  var meta = chart.getDatasetMeta(0);\n                  if (label === 'Red') {\n                    console.log('Red ' + meta);\n                  } else if (label ===' Yellow') {\n                    console.log('Yellow ' + meta);\n                  } else {\n                    console.log('Blue ' + meta);\n                  }\n                  return {\n                    text: label,\n                    fillStyle: 'black',\n                    // strokeStyle: style.borderColor,\n                    // lineWidth: style.borderWidth,\n                    // hidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,\n\n                    // Extra data used for toggling the correct item\n                    index: i\n                  };\n                });\n              }\n              return [];\n            }\n          }\n        }\n      }\n    });\n  }\n  render() {\n    return (\n      <div>\n        <canvas\n          id=\"myChart\"\n          ref={this.chartRef}\n        />\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}