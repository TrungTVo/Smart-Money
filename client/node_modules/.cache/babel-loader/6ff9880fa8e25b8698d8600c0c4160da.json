{"ast":null,"code":"var _jsxFileName = \"/Users/trungvo/javascript-stack/smart-money/client/src/common/charts/MyChart.js\";\nimport React, { Component } from 'react';\nimport Chart from \"chart.js\";\nimport { connect } from 'react-redux';\nimport { analysis } from '../../actions/dataAnalysis';\nimport randomColor from '../randomColors';\nimport * as actions from '../../actions/types';\n\nclass MyChart extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      window_width: window.innerWidth\n    };\n    this.chartRef = React.createRef();\n\n    this.buildChart = () => {\n      const window_width = this.state.window_width;\n      const _this$props = this.props,\n            type = _this$props.type,\n            position = _this$props.position,\n            dataAnalysis = _this$props.dataAnalysis;\n      window.addEventListener('resize', () => {\n        this.setState({\n          window_width: window.innerWidth\n        });\n      });\n\n      if (!dataAnalysis.analyzing) {\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n        new Chart(myChartRef, {\n          type: type,\n          data: {\n            labels: !dataAnalysis.analyzing ? dataAnalysis.categories : [],\n            datasets: [{\n              data: !dataAnalysis.analyzing ? dataAnalysis.data : [],\n              backgroundColor: randomColor(!dataAnalysis.analyzing ? dataAnalysis.categories.length : 0)\n            }]\n          },\n          options: {\n            title: {\n              text: 'Chart',\n              display: true\n            },\n            //responsive: true,\n            legend: {\n              display: true,\n              position: window_width > 945 ? type === 'pie' || type === 'doughnut' ? 'right' : position : 'bottom',\n              labels: {\n                boxWidth: window_width < 600 ? 15 : 40,\n                generateLabels: function (chart) {\n                  var data = chart.data;\n\n                  if (data.labels.length && data.datasets.length) {\n                    if (type !== 'line') {\n                      return data.labels.map(function (label, i) {\n                        return {\n                          text: label + ': ' + data.datasets[0].data[i],\n                          fillStyle: data.datasets[0].backgroundColor[i],\n                          index: i\n                        };\n                      });\n                    } else {\n                      return data.datasets.map(function (kind, i) {\n                        return {\n                          text: kind.label,\n                          fillStyle: kind.borderColor\n                        };\n                      });\n                    }\n                  }\n\n                  return [];\n                }\n              }\n            }\n          }\n        });\n      } // const myChartRef = this.chartRef.current.getContext(\"2d\");\n      // new Chart(myChartRef, {\n      //   type: type,\n      //   data: {\n      //     labels: !dataAnalysis.analyzing ? dataAnalysis.categories : [],\n      //     datasets: [\n      //       {\n      //         data: !dataAnalysis.analyzing ? dataAnalysis.data : [],\n      //         backgroundColor: randomColor(!dataAnalysis.analyzing ? dataAnalysis.categories.length : 0)\n      //       }\n      //     ]\n      //   },\n      //   options: {\n      //     title: {\n      //       text: 'Chart',\n      //       display: true\n      //     },\n      //     //responsive: true,\n      //     legend: {\n      //       display: true,\n      //       position: window_width > 945 ? (type === 'pie' || type ==='doughnut' ? 'right' : position) : 'bottom',\n      //       labels: {\n      //         boxWidth: window_width < 600 ? 15 : 40,\n      //         generateLabels: function(chart) {\n      //           var data = chart.data;\n      //           if (data.labels.length && data.datasets.length) {\n      //             if (type !== 'line') {\n      //               return data.labels.map(function (label, i) {\n      //                 return {\n      //                   text: label + ': ' + data.datasets[0].data[i],\n      //                   fillStyle: data.datasets[0].backgroundColor[i],\n      //                   index: i\n      //                 };\n      //               });\n      //             } else {\n      //               return data.datasets.map(function(kind, i) {\n      //                 return {\n      //                   text: kind.label,\n      //                   fillStyle: kind.borderColor\n      //                 }\n      //               })\n      //             }\n      //           }\n      //           return [];\n      //         }\n      //       }\n      //     }\n      //   }\n      // });\n\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const account_id = nextProps.account_id;\n    this.props.analysis(account_id);\n    this.buildChart();\n  }\n\n  render() {\n    const window_width = this.state.window_width;\n    const _this$props2 = this.props,\n          type = _this$props2.type,\n          dataAnalysis = _this$props2.dataAnalysis; //console.log(dataAnalysis);\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, dataAnalysis.analyzing ? React.createElement(\"div\", {\n      className: \"d-flex justify-content-center mb-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"spinner-border\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Loading...\"))) : React.createElement(\"canvas\", {\n      id: \"myChart\",\n      style: {\n        height: window_width < 350 ? type === 'pie' ? '300vh' : '350vh' : type === 'horizontalBar' ? '350vh' : '250vh',\n        width: '400vw'\n      },\n      ref: this.chartRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  errors: state.errors,\n  accounts: state.accounts,\n  transactions: state.transactions,\n  dataAnalysis: state.dataAnalysis\n});\n\nexport default connect(mapStateToProps, {\n  analysis\n})(MyChart);","map":{"version":3,"sources":["/Users/trungvo/javascript-stack/smart-money/client/src/common/charts/MyChart.js"],"names":["React","Component","Chart","connect","analysis","randomColor","actions","MyChart","state","window_width","window","innerWidth","chartRef","createRef","buildChart","props","type","position","dataAnalysis","addEventListener","setState","analyzing","myChartRef","current","getContext","data","labels","categories","datasets","backgroundColor","length","options","title","text","display","legend","boxWidth","generateLabels","chart","map","label","i","fillStyle","index","kind","borderColor","componentWillReceiveProps","nextProps","account_id","render","height","width","mapStateToProps","errors","accounts","transactions"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAASC,QAAT,QAAwB,4BAAxB;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,qBAAzB;;AAEA,MAAMC,OAAN,SAAsBN,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAC9BO,KAD8B,GACtB;AACNC,MAAAA,YAAY,EAAEC,MAAM,CAACC;AADf,KADsB;AAAA,SAI9BC,QAJ8B,GAInBZ,KAAK,CAACa,SAAN,EAJmB;;AAAA,SAc9BC,UAd8B,GAcjB,MAAM;AAAA,YACVL,YADU,GACM,KAAKD,KADX,CACVC,YADU;AAAA,0BAEuB,KAAKM,KAF5B;AAAA,YAETC,IAFS,eAETA,IAFS;AAAA,YAEHC,QAFG,eAEHA,QAFG;AAAA,YAEOC,YAFP,eAEOA,YAFP;AAGjBR,MAAAA,MAAM,CAACS,gBAAP,CAAwB,QAAxB,EAAkC,MAAM;AACtC,aAAKC,QAAL,CAAc;AAAEX,UAAAA,YAAY,EAAEC,MAAM,CAACC;AAAvB,SAAd;AACD,OAFD;;AAIA,UAAI,CAACO,YAAY,CAACG,SAAlB,EAA6B;AAC3B,cAAMC,UAAU,GAAG,KAAKV,QAAL,CAAcW,OAAd,CAAsBC,UAAtB,CAAiC,IAAjC,CAAnB;AAEA,YAAItB,KAAJ,CAAUoB,UAAV,EAAsB;AACpBN,UAAAA,IAAI,EAAEA,IADc;AAEpBS,UAAAA,IAAI,EAAE;AACJC,YAAAA,MAAM,EAAE,CAACR,YAAY,CAACG,SAAd,GAA0BH,YAAY,CAACS,UAAvC,GAAoD,EADxD;AAEJC,YAAAA,QAAQ,EAAE,CACR;AACEH,cAAAA,IAAI,EAAE,CAACP,YAAY,CAACG,SAAd,GAA0BH,YAAY,CAACO,IAAvC,GAA8C,EADtD;AAEEI,cAAAA,eAAe,EAAExB,WAAW,CAAC,CAACa,YAAY,CAACG,SAAd,GAA0BH,YAAY,CAACS,UAAb,CAAwBG,MAAlD,GAA2D,CAA5D;AAF9B,aADQ;AAFN,WAFc;AAWpBC,UAAAA,OAAO,EAAE;AACPC,YAAAA,KAAK,EAAE;AACLC,cAAAA,IAAI,EAAE,OADD;AAELC,cAAAA,OAAO,EAAE;AAFJ,aADA;AAKP;AACAC,YAAAA,MAAM,EAAE;AACND,cAAAA,OAAO,EAAE,IADH;AAENjB,cAAAA,QAAQ,EAAER,YAAY,GAAG,GAAf,GAAsBO,IAAI,KAAK,KAAT,IAAkBA,IAAI,KAAK,UAA3B,GAAwC,OAAxC,GAAkDC,QAAxE,GAAoF,QAFxF;AAGNS,cAAAA,MAAM,EAAE;AACNU,gBAAAA,QAAQ,EAAE3B,YAAY,GAAG,GAAf,GAAqB,EAArB,GAA0B,EAD9B;AAEN4B,gBAAAA,cAAc,EAAE,UAAUC,KAAV,EAAiB;AAC/B,sBAAIb,IAAI,GAAGa,KAAK,CAACb,IAAjB;;AACA,sBAAIA,IAAI,CAACC,MAAL,CAAYI,MAAZ,IAAsBL,IAAI,CAACG,QAAL,CAAcE,MAAxC,EAAgD;AAC9C,wBAAId,IAAI,KAAK,MAAb,EAAqB;AACnB,6BAAOS,IAAI,CAACC,MAAL,CAAYa,GAAZ,CAAgB,UAAUC,KAAV,EAAiBC,CAAjB,EAAoB;AACzC,+BAAO;AACLR,0BAAAA,IAAI,EAAEO,KAAK,GAAG,IAAR,GAAef,IAAI,CAACG,QAAL,CAAc,CAAd,EAAiBH,IAAjB,CAAsBgB,CAAtB,CADhB;AAELC,0BAAAA,SAAS,EAAEjB,IAAI,CAACG,QAAL,CAAc,CAAd,EAAiBC,eAAjB,CAAiCY,CAAjC,CAFN;AAGLE,0BAAAA,KAAK,EAAEF;AAHF,yBAAP;AAKD,uBANM,CAAP;AAOD,qBARD,MAQO;AACL,6BAAOhB,IAAI,CAACG,QAAL,CAAcW,GAAd,CAAkB,UAAUK,IAAV,EAAgBH,CAAhB,EAAmB;AAC1C,+BAAO;AACLR,0BAAAA,IAAI,EAAEW,IAAI,CAACJ,KADN;AAELE,0BAAAA,SAAS,EAAEE,IAAI,CAACC;AAFX,yBAAP;AAID,uBALM,CAAP;AAMD;AACF;;AACD,yBAAO,EAAP;AACD;AAvBK;AAHF;AAND;AAXW,SAAtB;AAgDD,OA1DgB,CA2DjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACD,KA3H6B;AAAA;;AAM9BC,EAAAA,yBAAyB,CAACC,SAAD,EAAY;AAAA,UAC5BC,UAD4B,GACdD,SADc,CAC5BC,UAD4B;AAGnC,SAAKjC,KAAL,CAAWX,QAAX,CAAoB4C,UAApB;AACA,SAAKlC,UAAL;AACD;;AAiHDmC,EAAAA,MAAM,GAAG;AAAA,UACAxC,YADA,GACgB,KAAKD,KADrB,CACAC,YADA;AAAA,yBAEwB,KAAKM,KAF7B;AAAA,UAECC,IAFD,gBAECA,IAFD;AAAA,UAEOE,YAFP,gBAEOA,YAFP,EAGP;;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEIA,YAAY,CAACG,SAAb,GACE;AAAK,MAAA,SAAS,EAAC,oCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAgC,MAAA,IAAI,EAAC,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CADF,CADF,GAOE;AACE,MAAA,EAAE,EAAC,SADL;AAEE,MAAA,KAAK,EAAE;AAAE6B,QAAAA,MAAM,EAAEzC,YAAY,GAAG,GAAf,GAAsBO,IAAI,KAAK,KAAT,GAAiB,OAAjB,GAA2B,OAAjD,GAA6DA,IAAI,KAAK,eAAT,GAA2B,OAA3B,GAAqC,OAA5G;AAAsHmC,QAAAA,KAAK,EAAE;AAA7H,OAFT;AAGE,MAAA,GAAG,EAAE,KAAKvC,QAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATN,CADF;AAoBD;;AApJ6B;;AAuJhC,MAAMwC,eAAe,GAAG5C,KAAK,KAAK;AAChC6C,EAAAA,MAAM,EAAE7C,KAAK,CAAC6C,MADkB;AAEhCC,EAAAA,QAAQ,EAAE9C,KAAK,CAAC8C,QAFgB;AAGhCC,EAAAA,YAAY,EAAE/C,KAAK,CAAC+C,YAHY;AAIhCrC,EAAAA,YAAY,EAAEV,KAAK,CAACU;AAJY,CAAL,CAA7B;;AAOA,eAAef,OAAO,CAACiD,eAAD,EAAkB;AAAChD,EAAAA;AAAD,CAAlB,CAAP,CAAqCG,OAArC,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport Chart from \"chart.js\";\nimport {connect} from 'react-redux';\nimport { analysis} from '../../actions/dataAnalysis';\nimport randomColor from '../randomColors';\nimport * as actions from '../../actions/types';\n\nclass MyChart extends Component {\n  state = {\n    window_width: window.innerWidth\n  }\n  chartRef = React.createRef();\n\n  componentWillReceiveProps(nextProps) {\n    const {account_id} = nextProps;\n\n    this.props.analysis(account_id);\n    this.buildChart();\n  }\n\n\n  buildChart = () => {\n    const {window_width} = this.state;\n    const { type, position, dataAnalysis} = this.props;\n    window.addEventListener('resize', () => {\n      this.setState({ window_width: window.innerWidth  })\n    });\n\n    if (!dataAnalysis.analyzing) {\n      const myChartRef = this.chartRef.current.getContext(\"2d\");\n\n      new Chart(myChartRef, {\n        type: type,\n        data: {\n          labels: !dataAnalysis.analyzing ? dataAnalysis.categories : [],\n          datasets: [\n            {\n              data: !dataAnalysis.analyzing ? dataAnalysis.data : [],\n              backgroundColor: randomColor(!dataAnalysis.analyzing ? dataAnalysis.categories.length : 0)\n            }\n          ]\n        },\n        options: {\n          title: {\n            text: 'Chart',\n            display: true\n          },\n          //responsive: true,\n          legend: {\n            display: true,\n            position: window_width > 945 ? (type === 'pie' || type === 'doughnut' ? 'right' : position) : 'bottom',\n            labels: {\n              boxWidth: window_width < 600 ? 15 : 40,\n              generateLabels: function (chart) {\n                var data = chart.data;\n                if (data.labels.length && data.datasets.length) {\n                  if (type !== 'line') {\n                    return data.labels.map(function (label, i) {\n                      return {\n                        text: label + ': ' + data.datasets[0].data[i],\n                        fillStyle: data.datasets[0].backgroundColor[i],\n                        index: i\n                      };\n                    });\n                  } else {\n                    return data.datasets.map(function (kind, i) {\n                      return {\n                        text: kind.label,\n                        fillStyle: kind.borderColor\n                      }\n                    })\n                  }\n                }\n                return [];\n              }\n            }\n          }\n        }\n      });\n    }\n    // const myChartRef = this.chartRef.current.getContext(\"2d\");\n\n    // new Chart(myChartRef, {\n    //   type: type,\n    //   data: {\n    //     labels: !dataAnalysis.analyzing ? dataAnalysis.categories : [],\n    //     datasets: [\n    //       {\n    //         data: !dataAnalysis.analyzing ? dataAnalysis.data : [],\n    //         backgroundColor: randomColor(!dataAnalysis.analyzing ? dataAnalysis.categories.length : 0)\n    //       }\n    //     ]\n    //   },\n    //   options: {\n    //     title: {\n    //       text: 'Chart',\n    //       display: true\n    //     },\n    //     //responsive: true,\n    //     legend: {\n    //       display: true,\n    //       position: window_width > 945 ? (type === 'pie' || type ==='doughnut' ? 'right' : position) : 'bottom',\n    //       labels: {\n    //         boxWidth: window_width < 600 ? 15 : 40,\n    //         generateLabels: function(chart) {\n    //           var data = chart.data;\n    //           if (data.labels.length && data.datasets.length) {\n    //             if (type !== 'line') {\n    //               return data.labels.map(function (label, i) {\n    //                 return {\n    //                   text: label + ': ' + data.datasets[0].data[i],\n    //                   fillStyle: data.datasets[0].backgroundColor[i],\n    //                   index: i\n    //                 };\n    //               });\n    //             } else {\n    //               return data.datasets.map(function(kind, i) {\n    //                 return {\n    //                   text: kind.label,\n    //                   fillStyle: kind.borderColor\n    //                 }\n    //               })\n    //             }\n    //           }\n    //           return [];\n    //         }\n    //       }\n    //     }\n    //   }\n    // });\n  }\n  render() {\n    const {window_width} = this.state;\n    const { type, dataAnalysis } = this.props;\n    //console.log(dataAnalysis);\n    return (\n      <div>\n        {\n          dataAnalysis.analyzing ? \n            <div className=\"d-flex justify-content-center mb-4\">\n              <div className=\"spinner-border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n              </div>\n            </div>\n          : \n            <canvas\n              id=\"myChart\"\n              style={{ height: window_width < 350 ? (type === 'pie' ? '300vh' : '350vh') : (type === 'horizontalBar' ? '350vh' : '250vh'), width: '400vw' }}\n              ref={this.chartRef}\n            />\n            \n        }\n        \n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  errors: state.errors,\n  accounts: state.accounts,\n  transactions: state.transactions,\n  dataAnalysis: state.dataAnalysis\n}) \n\nexport default connect(mapStateToProps, {analysis})(MyChart);"]},"metadata":{},"sourceType":"module"}