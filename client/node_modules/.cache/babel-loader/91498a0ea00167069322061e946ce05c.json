{"ast":null,"code":"var _jsxFileName = \"/Users/trungvo/javascript-stack/smart-money/client/src/common/charts/PieChart.js\";\nimport React, { Component } from 'react';\nimport Chart from \"chart.js\";\nimport randomColor from '../randomColors';\nexport default class PieChart extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      window_width: window.innerWidth\n    };\n    this.chartRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const window_width = this.state.window_width;\n    window.addEventListener('resize', () => {\n      this.setState({\n        window_width: window.innerWidth\n      });\n    }); //const myChartRef = this.chartRef.current.getContext(\"2d\");\n    // new Chart(myChartRef, {\n    //   type: \"horizontalBar\",\n    //   data: {\n    //     //Bring in data\n    //     labels: [\"General\", \"Gas\", \"Bills\", \"Electric\", \"Tuition\", \"Cars\", \"House\"],\n    //     datasets: [\n    //       {data: [18, 27, 11, 10, 13, 9, 12], backgroundColor: randomColor(7)}\n    //     ]\n    //   },\n    //   options: {\n    //     //Customize chart options\n    //     legend: {\n    //       position: window_width >= 945 ? 'right':'bottom',\n    //       labels: {\n    //         generateLabels: function(chart) {\n    //           var data = chart.data;\n    //           if (data.labels.length && data.datasets.length) {\n    //             return data.labels.map(function (label, i) {\n    //               return {\n    //                 text: label + ': ' + data.datasets[0].data[i],\n    //                 fillStyle: data.datasets[0].backgroundColor[i],\n    //                 // strokeStyle: style.borderColor,\n    //                 // lineWidth: style.borderWidth,\n    //                 // hidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,\n    //                 // Extra data used for toggling the correct item\n    //                 index: i\n    //               };\n    //             });\n    //           }\n    //           return [];\n    //         }\n    //       }\n    //     }\n    //   }\n    // });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"myChart\",\n      ref: this.chartRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), new Chart(myChartRef, {\n      type: \"horizontalBar\",\n      data: {\n        //Bring in data\n        labels: [\"General\", \"Gas\", \"Bills\", \"Electric\", \"Tuition\", \"Cars\", \"House\"],\n        datasets: [{\n          data: [18, 27, 11, 10, 13, 9, 12],\n          backgroundColor: randomColor(7)\n        }]\n      },\n      options: {\n        //Customize chart options\n        legend: {\n          position: window_width >= 945 ? 'right' : 'bottom',\n          labels: {\n            generateLabels: function (chart) {\n              var data = chart.data;\n\n              if (data.labels.length && data.datasets.length) {\n                return data.labels.map(function (label, i) {\n                  return {\n                    text: label + ': ' + data.datasets[0].data[i],\n                    fillStyle: data.datasets[0].backgroundColor[i],\n                    // strokeStyle: style.borderColor,\n                    // lineWidth: style.borderWidth,\n                    // hidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,\n                    // Extra data used for toggling the correct item\n                    index: i\n                  };\n                });\n              }\n\n              return [];\n            }\n          }\n        }\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/trungvo/javascript-stack/smart-money/client/src/common/charts/PieChart.js"],"names":["React","Component","Chart","randomColor","PieChart","state","window_width","window","innerWidth","chartRef","createRef","componentDidMount","addEventListener","setState","render","myChartRef","type","data","labels","datasets","backgroundColor","options","legend","position","generateLabels","chart","length","map","label","i","text","fillStyle","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AAEA,eAAe,MAAMC,QAAN,SAAuBH,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAC9CI,KAD8C,GACtC;AACNC,MAAAA,YAAY,EAAEC,MAAM,CAACC;AADf,KADsC;AAAA,SAI9CC,QAJ8C,GAInCT,KAAK,CAACU,SAAN,EAJmC;AAAA;;AAM9CC,EAAAA,iBAAiB,GAAG;AAAA,UACXL,YADW,GACK,KAAKD,KADV,CACXC,YADW;AAElBC,IAAAA,MAAM,CAACK,gBAAP,CAAwB,QAAxB,EAAkC,MAAM;AACtC,WAAKC,QAAL,CAAc;AAAEP,QAAAA,YAAY,EAAEC,MAAM,CAACC;AAAvB,OAAd;AACD,KAFD,EAFkB,CAMlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AACDM,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,EAAE,EAAC,SADL;AAEE,MAAA,GAAG,EAAE,KAAKL,QAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAMI,IAAIP,KAAJ,CAAUa,UAAV,EAAsB;AACpBC,MAAAA,IAAI,EAAE,eADc;AAEpBC,MAAAA,IAAI,EAAE;AACJ;AACAC,QAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,KAAZ,EAAmB,OAAnB,EAA4B,UAA5B,EAAwC,SAAxC,EAAmD,MAAnD,EAA2D,OAA3D,CAFJ;AAGJC,QAAAA,QAAQ,EAAE,CACR;AAAEF,UAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,CAArB,EAAwB,EAAxB,CAAR;AAAqCG,UAAAA,eAAe,EAAEjB,WAAW,CAAC,CAAD;AAAjE,SADQ;AAHN,OAFc;AASpBkB,MAAAA,OAAO,EAAE;AACP;AACAC,QAAAA,MAAM,EAAE;AACNC,UAAAA,QAAQ,EAAEjB,YAAY,IAAI,GAAhB,GAAsB,OAAtB,GAAgC,QADpC;AAENY,UAAAA,MAAM,EAAE;AACNM,YAAAA,cAAc,EAAE,UAAUC,KAAV,EAAiB;AAC/B,kBAAIR,IAAI,GAAGQ,KAAK,CAACR,IAAjB;;AACA,kBAAIA,IAAI,CAACC,MAAL,CAAYQ,MAAZ,IAAsBT,IAAI,CAACE,QAAL,CAAcO,MAAxC,EAAgD;AAC9C,uBAAOT,IAAI,CAACC,MAAL,CAAYS,GAAZ,CAAgB,UAAUC,KAAV,EAAiBC,CAAjB,EAAoB;AACzC,yBAAO;AACLC,oBAAAA,IAAI,EAAEF,KAAK,GAAG,IAAR,GAAeX,IAAI,CAACE,QAAL,CAAc,CAAd,EAAiBF,IAAjB,CAAsBY,CAAtB,CADhB;AAELE,oBAAAA,SAAS,EAAEd,IAAI,CAACE,QAAL,CAAc,CAAd,EAAiBC,eAAjB,CAAiCS,CAAjC,CAFN;AAGL;AACA;AACA;AAEA;AACAG,oBAAAA,KAAK,EAAEH;AARF,mBAAP;AAUD,iBAXM,CAAP;AAYD;;AACD,qBAAO,EAAP;AACD;AAlBK;AAFF;AAFD;AATW,KAAtB,CANJ,CADF;AA8CD;;AAlG6C","sourcesContent":["import React, { Component } from 'react'\nimport Chart from \"chart.js\";\nimport randomColor from '../randomColors';\n\nexport default class PieChart extends Component {\n  state = {\n    window_width: window.innerWidth\n  }\n  chartRef = React.createRef();\n\n  componentDidMount() {\n    const {window_width} = this.state;\n    window.addEventListener('resize', () => {\n      this.setState({ window_width: window.innerWidth  })\n    });\n\n    //const myChartRef = this.chartRef.current.getContext(\"2d\");\n\n    // new Chart(myChartRef, {\n    //   type: \"horizontalBar\",\n    //   data: {\n    //     //Bring in data\n    //     labels: [\"General\", \"Gas\", \"Bills\", \"Electric\", \"Tuition\", \"Cars\", \"House\"],\n    //     datasets: [\n    //       {data: [18, 27, 11, 10, 13, 9, 12], backgroundColor: randomColor(7)}\n    //     ]\n    //   },\n    //   options: {\n    //     //Customize chart options\n    //     legend: {\n    //       position: window_width >= 945 ? 'right':'bottom',\n    //       labels: {\n    //         generateLabels: function(chart) {\n    //           var data = chart.data;\n    //           if (data.labels.length && data.datasets.length) {\n    //             return data.labels.map(function (label, i) {\n    //               return {\n    //                 text: label + ': ' + data.datasets[0].data[i],\n    //                 fillStyle: data.datasets[0].backgroundColor[i],\n    //                 // strokeStyle: style.borderColor,\n    //                 // lineWidth: style.borderWidth,\n    //                 // hidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,\n\n    //                 // Extra data used for toggling the correct item\n    //                 index: i\n    //               };\n    //             });\n    //           }\n    //           return [];\n    //         }\n    //       }\n    //     }\n    //   }\n    // });\n  }\n  render() {\n    return (\n      <div>\n        <canvas\n          id=\"myChart\"\n          ref={this.chartRef}\n        />\n        {\n          new Chart(myChartRef, {\n            type: \"horizontalBar\",\n            data: {\n              //Bring in data\n              labels: [\"General\", \"Gas\", \"Bills\", \"Electric\", \"Tuition\", \"Cars\", \"House\"],\n              datasets: [\n                { data: [18, 27, 11, 10, 13, 9, 12], backgroundColor: randomColor(7) }\n              ]\n            },\n            options: {\n              //Customize chart options\n              legend: {\n                position: window_width >= 945 ? 'right' : 'bottom',\n                labels: {\n                  generateLabels: function (chart) {\n                    var data = chart.data;\n                    if (data.labels.length && data.datasets.length) {\n                      return data.labels.map(function (label, i) {\n                        return {\n                          text: label + ': ' + data.datasets[0].data[i],\n                          fillStyle: data.datasets[0].backgroundColor[i],\n                          // strokeStyle: style.borderColor,\n                          // lineWidth: style.borderWidth,\n                          // hidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,\n\n                          // Extra data used for toggling the correct item\n                          index: i\n                        };\n                      });\n                    }\n                    return [];\n                  }\n                }\n              }\n            }\n          })\n        }\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}