{"ast":null,"code":"var _jsxFileName = \"/Users/trungvo/javascript-stack/smart-money/client/src/evaluate/Evaluate.js\";\nimport React, { Component } from 'react';\nimport NavBar from '../layouts/NavBar';\nimport Footer from '../layouts/Footer';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport { connect } from 'react-redux';\nimport { loadAccounts } from '../actions/accountActions';\nimport Chart from \"react-apexcharts\";\nimport { analysis } from '../actions/dataAnalysis';\nimport { isNumber } from 'util';\nimport { currencyTypes, dateConverter } from '../dictionary/dictionary';\nimport { numberWithCommas } from '../utils/Utils';\nimport randomColors from '../common/randomColors';\n\nclass Evaluate extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      tabIndex: 0,\n      selected_account_id: '',\n      selected_month: new Date().getMonth() + 1,\n      selected_year: new Date().getFullYear(),\n      selected_overallYear: new Date().getFullYear(),\n      rendered: false,\n      options: {},\n      series: [],\n      labels: []\n    };\n\n    this.onChange = e => {\n      console.log([e.target.id]);\n      this.setState({\n        [e.target.id]: e.target.value\n      }, () => {\n        if (e.target.id === 'selected_account_id' || e.target.id === 'selected_month' || e.target.id === 'selected_year') {\n          this.props.analysis(this.state.selected_account_id);\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.loadAccounts();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const accounts = nextProps.accounts;\n\n    if (!accounts.loading && accounts.accounts.length > 0) {\n      if (!this.state.rendered) {\n        this.setState({\n          selected_account_id: accounts.accounts[0]._id\n        }, () => {\n          if (!this.state.rendered) {\n            this.setState({\n              rendered: true\n            }, () => {\n              this.props.analysis(this.state.selected_account_id);\n            });\n          }\n        });\n      }\n    }\n  }\n\n  render() {\n    const _this$state = this.state,\n          selected_account_id = _this$state.selected_account_id,\n          selected_month = _this$state.selected_month,\n          selected_year = _this$state.selected_year,\n          selected_overallYear = _this$state.selected_overallYear;\n    const _this$props = this.props,\n          accounts = _this$props.accounts,\n          dataAnalysis = _this$props.dataAnalysis;\n    const account = dataAnalysis.account;\n    let hasPositive = [];\n    let colors = [];\n\n    if (!dataAnalysis.loading) {\n      hasPositive = dataAnalysis.amounts.filter(amount => amount > 0);\n      dataAnalysis.amounts.forEach((amount, i) => {\n        dataAnalysis.amounts[i] = Math.abs(amount);\n      });\n      colors = randomColors(dataAnalysis.categories.length);\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(NavBar, {\n      active: \"evaluate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"container mt-3 mb-5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(Tabs, {\n      defaultFocus: true,\n      selectedIndex: this.state.tabIndex,\n      onSelect: tabIndex => this.setState({\n        tabIndex\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(TabList, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(Tab, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-chart-bar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"\\xA0\\xA0\"), \"Expense statistics \", React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"\\xA0\\xA0\"), accounts.loading ? null : React.createElement(\"span\", {\n      className: \"badge badge-secondary badge-pill\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, accounts.accounts.length)), React.createElement(Tab, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-calculator\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"\\xA0\\xA0\"), \"Investing tools\")), React.createElement(TabPanel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"statistics\",\n      className: \"m-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"text-muted\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-piggy-bank\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"\\xA0\"), \" Know what you're spending daily\"), accounts.loading ? null : accounts.accounts.length === 0 ? 'You currently have no accounts.' : null, React.createElement(\"div\", {\n      className: \"form-group row justify-content-start\",\n      style: {\n        'display': 'flex',\n        'alignItems': 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"currency\",\n      className: \"col-md-4 col-sm-6 col-xs-12 col-form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"lead text-muted\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"Select account:\")), React.createElement(\"div\", {\n      className: \"form-group col-md-7 col-sm-5 col-xs-12 mt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      className: \"custom-select\",\n      id: \"selected_account_id\",\n      value: selected_account_id,\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, !accounts.loading && accounts.accounts.map(account => React.createElement(\"option\", {\n      key: account._id,\n      value: account._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, account.name))))), React.createElement(\"div\", {\n      className: \"row justify-content-between mb-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-md-6 col-sm-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row justify-content-start\",\n      style: {\n        'display': 'flex',\n        'alignItems': 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"month\",\n      className: \"col-5 col-form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"lead text-muted\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Month:\")), React.createElement(\"div\", {\n      className: \"form-group col-7 mt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      className: \"custom-select\",\n      id: \"selected_month\",\n      value: selected_month,\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map((month, i) => React.createElement(\"option\", {\n      key: i,\n      value: month,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, month.toString().padStart(2, 0))))))), React.createElement(\"div\", {\n      className: \"col-md-6 col-sm-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row justify-content-start\",\n      style: {\n        'display': 'flex',\n        'alignItems': 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"year\",\n      className: \"col-5 col-form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"lead text-muted\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"Year:\")), React.createElement(\"div\", {\n      className: \"form-group col-7 mt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      className: \"custom-select\",\n      id: \"selected_year\",\n      value: selected_year,\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: new Date().getFullYear(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, new Date().getFullYear()), React.createElement(\"option\", {\n      value: new Date().getFullYear() - 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, new Date().getFullYear() - 1))))))), dataAnalysis.analyzing ? React.createElement(\"div\", {\n      className: \"d-flex justify-content-center mb-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"spinner-border\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \"Loading...\"))) : dataAnalysis.earned === 0 && dataAnalysis.expense === 0 ? React.createElement(\"p\", {\n      className: \"lead text-muted\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, \"No transactions found.\") : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row justify-content-between\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-md-6 col-sm-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card card-header rounded-0 border-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"d-flex\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"mr-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(\"small\", {\n      className: \"text-dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"Earned:\"), \" \", React.createElement(\"span\", {\n      className: \"text-success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, currencyTypes[account.currency], !dataAnalysis.loading && isNumber(dataAnalysis.earned) ? numberWithCommas(dataAnalysis.earned) : '')), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(\"small\", {\n      className: \"text-dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"Expense:\"), \" \", React.createElement(\"span\", {\n      className: \"text-danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"-\", currencyTypes[account.currency], !dataAnalysis.loading && isNumber(dataAnalysis.expense) ? numberWithCommas(Math.abs(dataAnalysis.expense)) : '')))), React.createElement(\"div\", {\n      className: \"card border-0 rounded-0 text-dark pt-3 pb-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"m-auto text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"mb-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(\"small\", {\n      className: \"lead text-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, dateConverter[selected_month], \", \", selected_year)), React.createElement(\"div\", {\n      className: \"mb-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(\"small\", {\n      className: \"lead text-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"Click on labels to view details\")), React.createElement(Chart, {\n      options: {\n        legend: {\n          position: 'bottom',\n          labels: {\n            colors: '#666666'\n          }\n        },\n        labels: ['earned', 'expense'],\n        colors: ['#66DA26', '#E91E63'],\n        plotOptions: {\n          pie: {\n            donut: {\n              size: '55%',\n              labels: {\n                show: true,\n                name: {\n                  show: true\n                },\n                value: {\n                  show: true,\n                  offsetY: 3,\n                  fontSize: '9px',\n                  formatter: function (val) {\n                    return currencyTypes[account.currency] + '' + val.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      series: !dataAnalysis.loading && isNumber(dataAnalysis.earned) && isNumber(dataAnalysis.expense) ? [dataAnalysis.earned, Math.abs(dataAnalysis.expense)] : [],\n      type: \"donut\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      className: \"col-md-6 col-sm-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card border-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(Chart, {\n      options: {\n        colors: colors,\n        xaxis: {\n          axisBorder: {\n            show: false\n          },\n          categories: !dataAnalysis.loading ? dataAnalysis.categories : [],\n          labels: {\n            show: true,\n            rotate: -45,\n            style: {\n              colors: colors\n            }\n          }\n        },\n        yaxis: {\n          show: false,\n          logarithmic: true,\n          decimalsInFloat: 0,\n          max: hasPositive.length === 0 ? 0 : !dataAnalysis.loading ? Math.max(...dataAnalysis.amounts) : 0\n        },\n        plotOptions: {\n          bar: {\n            columnWidth: '45%',\n            distributed: true\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        tooltip: {\n          y: {\n            formatter: function (val) {\n              return currencyTypes[account.currency] + '' + val.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n            }\n          }\n        }\n      },\n      series: [{\n        name: 'amount',\n        data: !dataAnalysis.loading ? dataAnalysis.amounts : []\n      }],\n      type: \"bar\",\n      width: \"100%\",\n      height: \"350\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, !dataAnalysis.loading && (dataAnalysis.earned || dataAnalysis.expense) ? Object.entries(dataAnalysis.data).map((data, i) => React.createElement(\"div\", {\n      key: i,\n      className: \"ml-3\",\n      style: {\n        'display': 'inline-flex',\n        'alignItems': 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        backgroundColor: colors[i],\n        height: '10px',\n        width: '10px'\n      },\n      className: \"mr-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      style: {\n        color: 'black'\n      },\n      className: \"text-muted\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, data[0], \":\"), React.createElement(\"span\", {\n      className: data[1] > 0 ? 'text-success' : 'text-danger',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, \"\\xA0\\xA0 \", data[1] < 0 ? '-' : '', currencyTypes[account.currency], numberWithCommas(Math.abs(data[1]))))) : null)))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    })), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }), React.createElement(\"h4\", {\n      className: \"text-muted\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, \"Overall\"), React.createElement(\"div\", {\n      className: \"row justify-content-start\",\n      style: {\n        'display': 'flex',\n        'alignItems': 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"year\",\n      className: \"col-5 col-form-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"lead text-muted\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, \"Year:\")), React.createElement(\"div\", {\n      className: \"form-group col-7 mt-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, React.createElement(\"select\", {\n      className: \"custom-select\",\n      id: \"selected_overallYear\",\n      value: selected_overallYear,\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: new Date().getFullYear(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, new Date().getFullYear()), React.createElement(\"option\", {\n      value: new Date().getFullYear() - 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, new Date().getFullYear() - 1)))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }), React.createElement(Chart, {\n      options: {\n        chart: {\n          zoom: {\n            enabled: false\n          }\n        },\n        colors: ['#66DA26', '#E91E63'],\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          curve: 'smooth'\n        },\n        title: {\n          text: \"Earning vs Expense for \".concat(selected_overallYear),\n          align: 'center'\n        },\n        grid: {\n          row: {\n            colors: ['#f3f3f3', 'transparent'],\n            // takes an array which will be repeated on columns\n            opacity: 0.5\n          }\n        },\n        xaxis: {\n          categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n        }\n      },\n      series: [{\n        name: \"Earned\",\n        data: [10, 41, 35, 51, 49, 62, 69, 91, 148, 155, 140, 120]\n      }, {\n        name: \"Expense\",\n        data: [-10, -41, -38, -51, -39, -62, -79, -91, -140, -50, -100, -90]\n      }],\n      height: \"350\",\n      type: \"area\",\n      width: \"100%\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    })), React.createElement(TabPanel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"invest_tools\",\n      className: \"m-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, \"to be updated soon ...\")))), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  accounts: state.accounts,\n  dataAnalysis: state.dataAnalysis,\n  success: state.success\n});\n\nexport default connect(mapStateToProps, {\n  loadAccounts,\n  analysis\n})(Evaluate);","map":{"version":3,"sources":["/Users/trungvo/javascript-stack/smart-money/client/src/evaluate/Evaluate.js"],"names":["React","Component","NavBar","Footer","Tab","Tabs","TabList","TabPanel","connect","loadAccounts","Chart","analysis","isNumber","currencyTypes","dateConverter","numberWithCommas","randomColors","Evaluate","state","tabIndex","selected_account_id","selected_month","Date","getMonth","selected_year","getFullYear","selected_overallYear","rendered","options","series","labels","onChange","e","console","log","target","id","setState","value","props","componentDidMount","componentWillReceiveProps","nextProps","accounts","loading","length","_id","render","dataAnalysis","account","hasPositive","colors","amounts","filter","amount","forEach","i","Math","abs","categories","map","name","month","toString","padStart","analyzing","earned","expense","currency","legend","position","plotOptions","pie","donut","size","show","offsetY","fontSize","formatter","val","replace","xaxis","axisBorder","rotate","style","yaxis","logarithmic","decimalsInFloat","max","bar","columnWidth","distributed","dataLabels","enabled","tooltip","y","data","Object","entries","backgroundColor","height","width","color","chart","zoom","stroke","curve","title","text","align","grid","row","opacity","mapStateToProps","success"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport NavBar from '../layouts/NavBar';\nimport Footer from '../layouts/Footer';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport { connect } from 'react-redux';\nimport { loadAccounts } from '../actions/accountActions';\nimport Chart from \"react-apexcharts\";\nimport { analysis } from '../actions/dataAnalysis';\nimport { isNumber } from 'util';\nimport { currencyTypes, dateConverter } from '../dictionary/dictionary';\nimport { numberWithCommas } from '../utils/Utils';\nimport randomColors from '../common/randomColors';\n\nclass Evaluate extends Component {\n  state = {\n    tabIndex: 0,\n    selected_account_id: '',\n    selected_month: new Date().getMonth()+1,\n    selected_year: new Date().getFullYear(),\n    selected_overallYear: new Date().getFullYear(),\n    rendered: false,\n\n    options: {},\n    series: [],\n    labels: []\n  }\n\n  componentDidMount() {\n    this.props.loadAccounts();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { accounts} = nextProps;\n\n    if (!accounts.loading && accounts.accounts.length > 0) {\n      if (!this.state.rendered) {\n        this.setState({\n          selected_account_id: accounts.accounts[0]._id\n        }, () => {\n          if (!this.state.rendered) {\n            this.setState({ rendered: true}, () => {\n              this.props.analysis(this.state.selected_account_id);\n            })\n          }\n        })\n      }\n    }\n  }\n\n  onChange = (e) => {\n    console.log([e.target.id])\n    this.setState({\n      [e.target.id]: e.target.value\n    }, () => {\n      if (e.target.id === 'selected_account_id'\n          || e.target.id === 'selected_month' || e.target.id === 'selected_year') {\n        this.props.analysis(this.state.selected_account_id);\n      }\n    })\n  }\n\n  render() {\n    const { selected_account_id, selected_month, selected_year, selected_overallYear} = this.state;\n    const {accounts, dataAnalysis } = this.props;\n    const {account} = dataAnalysis;\n    let hasPositive = [];\n    let colors = [];\n    if (!dataAnalysis.loading){\n      hasPositive = dataAnalysis.amounts.filter(amount => amount > 0);\n      dataAnalysis.amounts.forEach((amount, i) => {\n        dataAnalysis.amounts[i] = Math.abs(amount)\n      })\n      colors = randomColors(dataAnalysis.categories.length);\n    }\n\n\n    return (\n      <div>\n        <NavBar active=\"evaluate\" />\n\n        <div className=\"container mt-3 mb-5\">\n          <Tabs defaultFocus={true} selectedIndex={this.state.tabIndex} onSelect={tabIndex => this.setState({ tabIndex })}>\n            <TabList>\n              <Tab>\n                <i className='fas fa-chart-bar'></i><span>&nbsp;&nbsp;</span>\n                Expense statistics <span>&nbsp;&nbsp;</span>\n                {\n                  accounts.loading ? null :\n                    <span className=\"badge badge-secondary badge-pill\">{accounts.accounts.length}</span>\n                }\n\n              </Tab>\n              <Tab>\n                <i className='fas fa-calculator'></i><span>&nbsp;&nbsp;</span>\n                Investing tools\n              </Tab>\n            </TabList>\n\n            <TabPanel >\n              <br />\n              <div id='statistics' className='m-auto'>\n                <h4 className='text-muted'>\n                  <i className='fas fa-piggy-bank'>&nbsp;</i> Know what you're spending daily\n                </h4>\n                {\n                  accounts.loading ? null :\n                  (\n                    accounts.accounts.length === 0 ?\n                    'You currently have no accounts.' : null\n                  )\n                }\n                <div className=\"form-group row justify-content-start\" style={{ 'display': 'flex', 'alignItems': 'center' }}>\n                  <label htmlFor=\"currency\" className=\"col-md-4 col-sm-6 col-xs-12 col-form-label\">\n                    <span className='lead text-muted'>Select account:</span>\n                  </label>\n                  <div className=\"form-group col-md-7 col-sm-5 col-xs-12 mt-2\">\n                    <select className=\"custom-select\" id='selected_account_id' value={selected_account_id}\n                      onChange={this.onChange} >\n                      {\n                        !accounts.loading && accounts.accounts.map((account) => \n                          <option key={account._id} value={account._id}>{account.name}</option>\n                        )\n                      }\n                    </select>\n                    \n                  </div>\n                </div>\n                \n\n                <div className=\"row justify-content-between mb-3\">\n                  <div className=\"col-md-6 col-sm-12\">\n                    <div className=\"row justify-content-start\" style={{ 'display': 'flex', 'alignItems': 'center' }}>\n                      <label htmlFor=\"month\" className=\"col-5 col-form-label\">\n                        <span className='lead text-muted'>Month:</span>\n                      </label>\n                      <div className=\"form-group col-7 mt-2\">\n                        <select className=\"custom-select\" id='selected_month' value={selected_month} onChange={this.onChange} >\n                          {\n                            [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map((month,i) =>\n                              <option key={i} value={month}>{month.toString().padStart(2,0)}</option>\n                            )\n                          }\n                          \n                        </select>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"col-md-6 col-sm-12\">\n                    <div className=\"row justify-content-start\" style={{ 'display': 'flex', 'alignItems': 'center' }}>\n                      <label htmlFor=\"year\" className=\"col-5 col-form-label\">\n                        <span className='lead text-muted'>Year:</span>\n                      </label>\n                      <div className=\"form-group col-7 mt-2\">\n                        <select className=\"custom-select\" id='selected_year' value={selected_year} onChange={this.onChange} >\n                          <option value={new Date().getFullYear()}>{new Date().getFullYear()}</option>\n                          <option value={new Date().getFullYear()-1}>{new Date().getFullYear()-1}</option>\n                        </select>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {\n                dataAnalysis.analyzing ?\n                  <div className=\"d-flex justify-content-center mb-4\">\n                    <div className=\"spinner-border\" role=\"status\">\n                      <span className=\"sr-only\">Loading...</span>\n                    </div>\n                  </div>\n                  :\n                  (\n                    dataAnalysis.earned === 0 && dataAnalysis.expense === 0 ?\n                    <p className='lead text-muted'>No transactions found.</p>\n                    :\n                      <div>\n                        <div className=\"row justify-content-between\">\n                          <div className=\"col-md-6 col-sm-12\">\n                            <div className='card card-header rounded-0 border-0'>\n                              <div className='d-flex'>\n                                <div className='mr-auto'>\n                                  <small className='text-dark'>Earned:</small> <span className='text-success'>{currencyTypes[account.currency]}{!dataAnalysis.loading && isNumber(dataAnalysis.earned) ? numberWithCommas(dataAnalysis.earned) : ''}</span>\n                                </div>\n                                <div>\n                                  <small className='text-dark'>Expense:</small> <span className='text-danger'>-{currencyTypes[account.currency]}{!dataAnalysis.loading && isNumber(dataAnalysis.expense) ? numberWithCommas(Math.abs(dataAnalysis.expense)) : ''}</span>\n                                </div>\n                              </div>\n                            </div>\n                            <div className='card border-0 rounded-0 text-dark pt-3 pb-3'>\n                              <div className='m-auto text-center'>\n                                <div className='mb-3'>\n                                  <small className='lead text-info'>{dateConverter[selected_month]}, {selected_year}</small>\n                                </div>\n                                <div className='mb-3'>\n                                  <small className='lead text-info'>Click on labels to view details</small>\n                                </div>\n                                <Chart\n                                  options={{\n                                    legend: {\n                                      position: 'bottom',\n                                      labels: {\n                                        colors: '#666666'\n                                      }\n                                    },\n                                    labels: [\n                                      'earned',\n                                      'expense'\n                                    ],\n                                    colors: ['#66DA26', '#E91E63'],\n                                    plotOptions: {\n                                      pie: {\n                                        donut: {\n                                          size: '55%',\n                                          labels: {\n                                            show: true,\n                                            name: {\n                                              show: true,\n                                            },\n                                            value: {\n                                              show: true,\n                                              offsetY: 3,\n                                              fontSize: '9px',\n                                              formatter: function (val) {\n                                                return currencyTypes[account.currency] + '' + val.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }}\n                                  series={\n                                    !dataAnalysis.loading && isNumber(dataAnalysis.earned) && isNumber(dataAnalysis.expense) ? [dataAnalysis.earned, Math.abs(dataAnalysis.expense)] : []\n                                  }\n                                  type=\"donut\"\n                                />\n                              </div>\n                            </div>\n                          </div>\n\n                          <div className=\"col-md-6 col-sm-12\">\n                            <div className='card border-0' >\n                              <Chart\n                                options={{\n                                  colors: colors,\n                                  xaxis: {\n                                    axisBorder: {\n                                      show: false\n                                    },\n                                    categories: !dataAnalysis.loading ? dataAnalysis.categories : [],\n                                    labels: {\n                                      show: true,\n                                      rotate: -45,\n                                      style: {\n                                        colors: colors\n                                      }\n                                    }\n                                  },\n                                  yaxis: {\n                                    show: false,\n                                    logarithmic: true,\n                                    decimalsInFloat: 0,\n                                    max: hasPositive.length === 0 ? 0 :\n                                      (!dataAnalysis.loading ? Math.max(...dataAnalysis.amounts) : 0)\n                                  },\n                                  plotOptions: {\n                                    bar: {\n                                      columnWidth: '45%',\n                                      distributed: true,\n                                    }\n                                  },\n                                  dataLabels: {\n                                    enabled: false\n                                  },\n                                  tooltip: {\n                                    y: {\n                                      formatter: function (val) {\n                                        return currencyTypes[account.currency] + '' + val.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n                                      }\n                                    }\n                                  }\n                                }}\n                                series={\n                                  [{\n                                    name: 'amount',\n                                    data: !dataAnalysis.loading ? dataAnalysis.amounts : []\n                                  }]\n                                }\n                                type=\"bar\"\n                                width=\"100%\"\n                                height='350'\n                              />\n                              <div >\n                                {\n                                  !dataAnalysis.loading && (dataAnalysis.earned || dataAnalysis.expense) ?\n                                    Object.entries(dataAnalysis.data).map((data, i) =>\n                                      <div key={i} className='ml-3' style={{ 'display': 'inline-flex', 'alignItems': 'center' }}>\n                                        <div style={{ backgroundColor: colors[i], height: '10px', width: '10px' }} className='mr-2'></div>\n                                        <span style={{ color: 'black' }} className='text-muted' >{data[0]}:</span>\n                                        <span className={data[1] > 0 ? 'text-success' : 'text-danger'}>&nbsp;&nbsp; {data[1] < 0 ? '-' : ''}{currencyTypes[account.currency]}{numberWithCommas(Math.abs(data[1]))}</span>\n                                      </div>\n                                    )\n                                    : null\n                                }\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        \n                        <br/><br/>\n                                \n                      </div>\n                  )\n                  \n              }\n              <hr/>\n              <h4 className='text-muted'>\n                Overall\n              </h4>\n              <div className=\"row justify-content-start\" style={{ 'display': 'flex', 'alignItems': 'center' }}>\n                <label htmlFor=\"year\" className=\"col-5 col-form-label\">\n                  <span className='lead text-muted'>Year:</span>\n                </label>\n                <div className=\"form-group col-7 mt-2\">\n                  <select className=\"custom-select\" id='selected_overallYear' value={selected_overallYear} onChange={this.onChange} >\n                    <option value={new Date().getFullYear()}>{new Date().getFullYear()}</option>\n                    <option value={new Date().getFullYear() - 1}>{new Date().getFullYear() - 1}</option>\n                  </select>\n                </div>\n              </div>\n              <br/>\n              <Chart\n                options={{\n                  chart: {\n                    zoom: {\n                      enabled: false\n                    }\n                  },\n                  colors: ['#66DA26', '#E91E63'],\n                  dataLabels: {\n                    enabled: false\n                  },\n                  stroke: {\n                    curve: 'smooth'\n                  },\n                  title: {\n                    text: `Earning vs Expense for ${selected_overallYear}`,\n                    align: 'center'\n                  },\n                  grid: {\n                    row: {\n                      colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns\n                      opacity: 0.5\n                    },\n                  },\n                  xaxis: {\n                    categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n                  }\n                }}\n                series={[\n                  {\n                    name: \"Earned\",\n                    data: [10, 41, 35, 51, 49, 62, 69, 91, 148, 155, 140, 120],\n                  },\n                  {\n                    name: \"Expense\",\n                    data: [-10, -41, -38, -51, -39, -62, -79, -91, -140, -50, -100, -90],\n                  }\n                ]}\n\n                height='350'\n                type=\"area\"\n                width=\"100%\"\n              />\n\n            </TabPanel>\n            <TabPanel >\n              <br />\n              <div id='invest_tools' className='m-auto'>\n                to be updated soon ...\n              </div>\n            </TabPanel>\n\n          </Tabs>\n        </div>\n\n        <Footer />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  accounts: state.accounts,\n  dataAnalysis: state.dataAnalysis,\n  success: state.success\n})\n\nexport default connect(mapStateToProps, { loadAccounts, analysis})(Evaluate);\n"]},"metadata":{},"sourceType":"module"}