{"ast":null,"code":"import axios from 'axios';\nimport * as actions from './types';\nimport { clearErrors, clearSuccess } from './clearErrSuccess';\nimport { loadAccounts, loadAccount } from './accountActions'; // load all transactions\n\nexport const loadTransactions = account => dispatch => {\n  dispatch(transactionsLoading());\n  dispatch(loadAccount(account._id));\n  axios.get(\"/accounts/\".concat(account._id, \"/transactions/all\")).then(res => {\n    dispatch({\n      type: actions.GET_ALL_TRANSACTIONS,\n      payload: {\n        transactions: res.data.transactions,\n        account: res.data.account\n      }\n    });\n  }).catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // add new transaction\n\nexport const addTransaction = transaction => dispatch => {\n  dispatch(clearErrors());\n  dispatch(clearSuccess());\n  dispatch(loadAccount(transaction.bankAccount._id));\n  axios.post(\"/accounts/\".concat(transaction.bankAccount._id, \"/transactions/add\"), transaction).then(res => {\n    dispatch({\n      type: actions.ADD_TRANSACTION,\n      payload: {\n        transaction: res.data.new_transaction,\n        account: res.data.account\n      }\n    });\n    dispatch({\n      type: actions.GET_SUCCESS,\n      payload: {\n        success_msg: res.data.success_msg,\n        type: actions.ADD_TRANSACTION,\n        account: transaction.bankAccount.name\n      }\n    });\n  }).then(() => {\n    dispatch(loadAccounts());\n  }).catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // delete transaction\n\nexport const delete_transaction = (bankAccount, transaction) => dispatch => {\n  dispatch(clearErrors());\n  dispatch(clearSuccess());\n  dispatch(loadAccount(bankAccount._id));\n  dispatch(transactionsLoading());\n  axios.post(\"/accounts/\".concat(bankAccount._id, \"/transactions/delete/\").concat(transaction._id), {\n    transaction_amount: transaction.amount\n  }).then(res => {\n    dispatch({\n      type: actions.DELETE_TRANSACTION,\n      payload: {\n        account: res.data.account,\n        transaction_id: transaction._id\n      }\n    });\n    dispatch({\n      type: actions.GET_SUCCESS,\n      payload: {\n        success_msg: res.data.success_msg,\n        type: actions.DELETE_TRANSACTION,\n        account: bankAccount.name\n      }\n    });\n  }).then(() => {\n    dispatch(loadAccounts());\n  }).catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // set transactions loading\n\nconst transactionsLoading = () => dispatch => {\n  dispatch({\n    type: actions.GET_TRANSACTIONS_LOADING\n  });\n};","map":{"version":3,"sources":["/Users/trungvo/javascript-stack/smart-money/client/src/actions/transactionActions.js"],"names":["axios","actions","clearErrors","clearSuccess","loadAccounts","loadAccount","loadTransactions","account","dispatch","transactionsLoading","_id","get","then","res","type","GET_ALL_TRANSACTIONS","payload","transactions","data","catch","err","GET_ERRORS","response","addTransaction","transaction","bankAccount","post","ADD_TRANSACTION","new_transaction","GET_SUCCESS","success_msg","name","delete_transaction","transaction_amount","amount","DELETE_TRANSACTION","transaction_id","GET_TRANSACTIONS_LOADING"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,OAAZ,MAAyB,SAAzB;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,mBAA1C;AACA,SAAQC,YAAR,EAAsBC,WAAtB,QAAwC,kBAAxC,C,CAEA;;AACA,OAAO,MAAMC,gBAAgB,GAAIC,OAAD,IAAaC,QAAQ,IAAI;AACvDA,EAAAA,QAAQ,CAACC,mBAAmB,EAApB,CAAR;AACAD,EAAAA,QAAQ,CAACH,WAAW,CAACE,OAAO,CAACG,GAAT,CAAZ,CAAR;AAEAV,EAAAA,KAAK,CAACW,GAAN,qBAAuBJ,OAAO,CAACG,GAA/B,wBACGE,IADH,CACQC,GAAG,IAAI;AACXL,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEb,OAAO,CAACc,oBADP;AAEPC,MAAAA,OAAO,EAAE;AACPC,QAAAA,YAAY,EAAEJ,GAAG,CAACK,IAAJ,CAASD,YADhB;AAEPV,QAAAA,OAAO,EAAEM,GAAG,CAACK,IAAJ,CAASX;AAFX;AAFF,KAAD,CAAR;AAOD,GATH,EAUGY,KAVH,CAUSC,GAAG,IAAI;AACZZ,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEb,OAAO,CAACoB,UADP;AAEPL,MAAAA,OAAO,EAAEI,GAAG,CAACE,QAAJ,CAAaJ;AAFf,KAAD,CAAR;AAID,GAfH;AAgBD,CApBM,C,CAsBP;;AACA,OAAO,MAAMK,cAAc,GAAIC,WAAD,IAAiBhB,QAAQ,IAAI;AACzDA,EAAAA,QAAQ,CAACN,WAAW,EAAZ,CAAR;AACAM,EAAAA,QAAQ,CAACL,YAAY,EAAb,CAAR;AACAK,EAAAA,QAAQ,CAACH,WAAW,CAACmB,WAAW,CAACC,WAAZ,CAAwBf,GAAzB,CAAZ,CAAR;AAEAV,EAAAA,KAAK,CAAC0B,IAAN,qBAAwBF,WAAW,CAACC,WAAZ,CAAwBf,GAAhD,wBAAwEc,WAAxE,EACGZ,IADH,CACQC,GAAG,IAAI;AACXL,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEb,OAAO,CAAC0B,eADP;AAEPX,MAAAA,OAAO,EAAE;AACPQ,QAAAA,WAAW,EAAEX,GAAG,CAACK,IAAJ,CAASU,eADf;AAEPrB,QAAAA,OAAO,EAAEM,GAAG,CAACK,IAAJ,CAASX;AAFX;AAFF,KAAD,CAAR;AAOAC,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEb,OAAO,CAAC4B,WADP;AAEPb,MAAAA,OAAO,EAAE;AACPc,QAAAA,WAAW,EAAEjB,GAAG,CAACK,IAAJ,CAASY,WADf;AAEPhB,QAAAA,IAAI,EAAEb,OAAO,CAAC0B,eAFP;AAGPpB,QAAAA,OAAO,EAAEiB,WAAW,CAACC,WAAZ,CAAwBM;AAH1B;AAFF,KAAD,CAAR;AAQD,GAjBH,EAkBGnB,IAlBH,CAkBQ,MAAM;AACVJ,IAAAA,QAAQ,CAACJ,YAAY,EAAb,CAAR;AACD,GApBH,EAqBGe,KArBH,CAqBSC,GAAG,IAAI;AACZZ,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEb,OAAO,CAACoB,UADP;AAEPL,MAAAA,OAAO,EAAEI,GAAG,CAACE,QAAJ,CAAaJ;AAFf,KAAD,CAAR;AAID,GA1BH;AA2BD,CAhCM,C,CAkCP;;AACA,OAAO,MAAMc,kBAAkB,GAAG,CAACP,WAAD,EAAcD,WAAd,KAA8BhB,QAAQ,IAAI;AAC1EA,EAAAA,QAAQ,CAACN,WAAW,EAAZ,CAAR;AACAM,EAAAA,QAAQ,CAACL,YAAY,EAAb,CAAR;AACAK,EAAAA,QAAQ,CAACH,WAAW,CAACoB,WAAW,CAACf,GAAb,CAAZ,CAAR;AACAF,EAAAA,QAAQ,CAACC,mBAAmB,EAApB,CAAR;AAEAT,EAAAA,KAAK,CAAC0B,IAAN,qBAAwBD,WAAW,CAACf,GAApC,kCAA+Dc,WAAW,CAACd,GAA3E,GAAkF;AAACuB,IAAAA,kBAAkB,EAAET,WAAW,CAACU;AAAjC,GAAlF,EACGtB,IADH,CACQC,GAAG,IAAI;AACXL,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEb,OAAO,CAACkC,kBADP;AAEPnB,MAAAA,OAAO,EAAE;AACPT,QAAAA,OAAO,EAAEM,GAAG,CAACK,IAAJ,CAASX,OADX;AAEP6B,QAAAA,cAAc,EAAEZ,WAAW,CAACd;AAFrB;AAFF,KAAD,CAAR;AAOAF,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEb,OAAO,CAAC4B,WADP;AAEPb,MAAAA,OAAO,EAAE;AACPc,QAAAA,WAAW,EAAEjB,GAAG,CAACK,IAAJ,CAASY,WADf;AAEPhB,QAAAA,IAAI,EAAEb,OAAO,CAACkC,kBAFP;AAGP5B,QAAAA,OAAO,EAAEkB,WAAW,CAACM;AAHd;AAFF,KAAD,CAAR;AAQD,GAjBH,EAkBGnB,IAlBH,CAkBQ,MAAM;AACVJ,IAAAA,QAAQ,CAACJ,YAAY,EAAb,CAAR;AACD,GApBH,EAqBGe,KArBH,CAqBSC,GAAG,IAAI;AACZZ,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAEb,OAAO,CAACoB,UADP;AAEPL,MAAAA,OAAO,EAAEI,GAAG,CAACE,QAAJ,CAAaJ;AAFf,KAAD,CAAR;AAID,GA1BH;AA2BD,CAjCM,C,CAoCP;;AACA,MAAMT,mBAAmB,GAAG,MAAMD,QAAQ,IAAI;AAC5CA,EAAAA,QAAQ,CAAC;AACPM,IAAAA,IAAI,EAAEb,OAAO,CAACoC;AADP,GAAD,CAAR;AAGD,CAJD","sourcesContent":["import axios from 'axios';\nimport * as actions from './types';\nimport { clearErrors, clearSuccess } from './clearErrSuccess';\nimport {loadAccounts, loadAccount} from './accountActions';\n\n// load all transactions\nexport const loadTransactions = (account) => dispatch => {\n  dispatch(transactionsLoading());\n  dispatch(loadAccount(account._id));\n\n  axios.get(`/accounts/${account._id}/transactions/all`)\n    .then(res => {\n      dispatch({\n        type: actions.GET_ALL_TRANSACTIONS,\n        payload: {\n          transactions: res.data.transactions,\n          account: res.data.account\n        }\n      })\n    })\n    .catch(err => {\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: err.response.data\n      })\n    })\n}\n\n// add new transaction\nexport const addTransaction = (transaction) => dispatch => {\n  dispatch(clearErrors());\n  dispatch(clearSuccess());\n  dispatch(loadAccount(transaction.bankAccount._id));\n  \n  axios.post(`/accounts/${transaction.bankAccount._id}/transactions/add`, transaction)\n    .then(res => {\n      dispatch({\n        type: actions.ADD_TRANSACTION,\n        payload: {\n          transaction: res.data.new_transaction,\n          account: res.data.account\n        }\n      })\n      dispatch({\n        type: actions.GET_SUCCESS,\n        payload: {\n          success_msg: res.data.success_msg,\n          type: actions.ADD_TRANSACTION,\n          account: transaction.bankAccount.name\n        }\n      })\n    })\n    .then(() => {\n      dispatch(loadAccounts());\n    })\n    .catch(err => {\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: err.response.data\n      })\n    })\n}\n\n// delete transaction\nexport const delete_transaction = (bankAccount, transaction) => dispatch => {\n  dispatch(clearErrors());\n  dispatch(clearSuccess());\n  dispatch(loadAccount(bankAccount._id));\n  dispatch(transactionsLoading());\n\n  axios.post(`/accounts/${bankAccount._id}/transactions/delete/${transaction._id}`, {transaction_amount: transaction.amount})\n    .then(res => {\n      dispatch({\n        type: actions.DELETE_TRANSACTION,\n        payload: {\n          account: res.data.account,\n          transaction_id: transaction._id\n        }\n      })\n      dispatch({\n        type: actions.GET_SUCCESS,\n        payload: {\n          success_msg: res.data.success_msg,\n          type: actions.DELETE_TRANSACTION,\n          account: bankAccount.name\n        }\n      })\n    })\n    .then(() => {\n      dispatch(loadAccounts());\n    })\n    .catch(err => {\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: err.response.data\n      })\n    })\n}\n\n\n// set transactions loading\nconst transactionsLoading = () => dispatch => {\n  dispatch({\n    type: actions.GET_TRANSACTIONS_LOADING\n  })\n}\n"]},"metadata":{},"sourceType":"module"}