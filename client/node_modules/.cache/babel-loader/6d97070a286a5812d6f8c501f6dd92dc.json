{"ast":null,"code":"var _jsxFileName = \"/Users/trungvo/javascript-stack/smart-money/client/src/common/charts/MyChart.js\";\nimport React, { Component } from 'react';\nimport Chart from \"chart.js\";\nimport { connect } from 'react-redux';\nimport { analysis } from '../../actions/dataAnalysis';\nimport randomColor from '../randomColors';\nimport * as actions from '../../actions/types';\n\nclass MyChart extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      window_width: window.innerWidth\n    };\n    this.chartRef = React.createRef();\n\n    this.buildChart = () => {\n      const window_width = this.state.window_width;\n      const _this$props = this.props,\n            type = _this$props.type,\n            position = _this$props.position,\n            dataAnalysis = _this$props.dataAnalysis;\n      window.addEventListener('resize', () => {\n        this.setState({\n          window_width: window.innerWidth\n        });\n      }); // console.log(this.chartRef.current)\n      // const myChartRef = this.chartRef.current.getContext(\"2d\");\n\n      new Chart(React.createRef().current.getContext('2d'), {\n        type: type,\n        data: {\n          labels: !dataAnalysis.analyzing ? dataAnalysis.categories : [],\n          datasets: [{\n            data: !dataAnalysis.analyzing ? dataAnalysis.data : [],\n            backgroundColor: randomColor(!dataAnalysis.analyzing ? dataAnalysis.categories.length : 0)\n          }]\n        },\n        options: {\n          title: {\n            text: 'Chart',\n            display: true\n          },\n          //responsive: true,\n          legend: {\n            display: true,\n            position: window_width > 945 ? type === 'pie' || type === 'doughnut' ? 'right' : position : 'bottom',\n            labels: {\n              boxWidth: window_width < 600 ? 15 : 40,\n              generateLabels: function (chart) {\n                var data = chart.data;\n\n                if (data.labels.length && data.datasets.length) {\n                  if (type !== 'line') {\n                    return data.labels.map(function (label, i) {\n                      return {\n                        text: label + ': ' + data.datasets[0].data[i],\n                        fillStyle: data.datasets[0].backgroundColor[i],\n                        index: i\n                      };\n                    });\n                  } else {\n                    return data.datasets.map(function (kind, i) {\n                      return {\n                        text: kind.label,\n                        fillStyle: kind.borderColor\n                      };\n                    });\n                  }\n                }\n\n                return [];\n              }\n            }\n          }\n        }\n      });\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const account_id = nextProps.account_id;\n    this.props.analysis(account_id);\n  }\n\n  render() {\n    const window_width = this.state.window_width;\n    const _this$props2 = this.props,\n          type = _this$props2.type,\n          dataAnalysis = _this$props2.dataAnalysis; //console.log(dataAnalysis);\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, dataAnalysis.analyzing ? React.createElement(\"div\", {\n      className: \"d-flex justify-content-center mb-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"spinner-border\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Loading...\"))) : null);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  errors: state.errors,\n  accounts: state.accounts,\n  transactions: state.transactions,\n  dataAnalysis: state.dataAnalysis\n});\n\nexport default connect(mapStateToProps, {\n  analysis\n})(MyChart);","map":{"version":3,"sources":["/Users/trungvo/javascript-stack/smart-money/client/src/common/charts/MyChart.js"],"names":["React","Component","Chart","connect","analysis","randomColor","actions","MyChart","state","window_width","window","innerWidth","chartRef","createRef","buildChart","props","type","position","dataAnalysis","addEventListener","setState","current","getContext","data","labels","analyzing","categories","datasets","backgroundColor","length","options","title","text","display","legend","boxWidth","generateLabels","chart","map","label","i","fillStyle","index","kind","borderColor","componentWillReceiveProps","nextProps","account_id","render","mapStateToProps","errors","accounts","transactions"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Chart from \"chart.js\";\nimport {connect} from 'react-redux';\nimport { analysis} from '../../actions/dataAnalysis';\nimport randomColor from '../randomColors';\nimport * as actions from '../../actions/types';\n\nclass MyChart extends Component {\n  state = {\n    window_width: window.innerWidth\n  }\n  chartRef = React.createRef();\n\n\n  componentWillReceiveProps(nextProps) {\n    const {account_id} = nextProps;\n\n    this.props.analysis(account_id);\n  }\n\n\n  buildChart = () => {\n    const {window_width} = this.state;\n    const { type, position, dataAnalysis} = this.props;\n    window.addEventListener('resize', () => {\n      this.setState({ window_width: window.innerWidth  })\n    });\n\n    // console.log(this.chartRef.current)\n    // const myChartRef = this.chartRef.current.getContext(\"2d\");\n\n    new Chart(React.createRef().current.getContext('2d'), {\n      type: type,\n      data: {\n        labels: !dataAnalysis.analyzing ? dataAnalysis.categories : [],\n        datasets: [\n          {\n            data: !dataAnalysis.analyzing ? dataAnalysis.data : [],\n            backgroundColor: randomColor(!dataAnalysis.analyzing ? dataAnalysis.categories.length : 0)\n          }\n        ]\n      },\n      options: {\n        title: {\n          text: 'Chart',\n          display: true\n        },\n        //responsive: true,\n        legend: {\n          display: true,\n          position: window_width > 945 ? (type === 'pie' || type ==='doughnut' ? 'right' : position) : 'bottom',\n          labels: {\n            boxWidth: window_width < 600 ? 15 : 40,\n            generateLabels: function(chart) {\n              var data = chart.data;\n              if (data.labels.length && data.datasets.length) {\n                if (type !== 'line') {\n                  return data.labels.map(function (label, i) {\n                    return {\n                      text: label + ': ' + data.datasets[0].data[i],\n                      fillStyle: data.datasets[0].backgroundColor[i],\n                      index: i\n                    };\n                  });\n                } else {\n                  return data.datasets.map(function(kind, i) {\n                    return {\n                      text: kind.label,\n                      fillStyle: kind.borderColor\n                    }\n                  })\n                }\n              }\n              return [];\n            }\n          }\n        }\n      }\n    });\n  }\n  render() {\n    const {window_width} = this.state;\n    const { type, dataAnalysis } = this.props;\n    //console.log(dataAnalysis);\n    return (\n      <div>\n        {\n          dataAnalysis.analyzing ? \n            <div className=\"d-flex justify-content-center mb-4\">\n              <div className=\"spinner-border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n              </div>\n            </div>\n          : \n            null\n            \n        }\n        \n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  errors: state.errors,\n  accounts: state.accounts,\n  transactions: state.transactions,\n  dataAnalysis: state.dataAnalysis\n}) \n\nexport default connect(mapStateToProps, {analysis})(MyChart);"]},"metadata":{},"sourceType":"module"}