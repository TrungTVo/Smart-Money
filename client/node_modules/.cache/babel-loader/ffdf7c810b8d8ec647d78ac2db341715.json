{"ast":null,"code":"import axios from 'axios';\nimport * as actions from './types';\nimport jwt_decode from 'jwt-decode';\nimport { clearErrors, clearSuccess } from './clearErrSuccess';\nimport { loadAccounts } from './accountActions'; // register new user\n\nexport const createUser = (newUser, history) => dispatch => {\n  axios.post('/users/register', newUser).then(res => {\n    dispatch({\n      type: actions.ADD_USER,\n      payload: res.data.newUser\n    });\n    history.push({\n      pathname: '/users/login',\n      state: {\n        success: true,\n        success_msg: 'You are now registered and can log in'\n      }\n    });\n  }).catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // login with email and password\n\nexport const loginUser = user => dispatch => {\n  axios.post('/users/login', user).then(res => {\n    // save token to localstorage\n    localStorage.setItem('jwtToken', res.data.token); // Set token to Auth header\n\n    if (res.data.token) {\n      // Apply to every request\n      axios.defaults.headers.common['Authorization'] = res.data.token;\n    } // Decode token to get user data\n\n\n    const decoded = jwt_decode(res.data.token); // Set current user\n\n    dispatch({\n      type: actions.SET_CURRENT_USER,\n      payload: decoded\n    });\n  }).catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // Login with Google\n\nexport const googleSignIn = tokenObj => dispatch => {\n  var token = tokenObj.id_token; // decoded user info with JWT token\n\n  var decoded = jwt_decode(token); // set user\n\n  const user = {\n    name: decoded.name,\n    email: decoded.email,\n    imageUrl: decoded.picture // call POST request\n\n  };\n  axios.post('/users/googleLogin', user).then(res => {\n    // save token to localstorage\n    localStorage.setItem('jwtToken', res.data.token); // Apply to every request\n\n    axios.defaults.headers.common['Authorization'] = res.data.token; // decoded user info with JWT token\n\n    var decoded = jwt_decode(res.data.token); // Set current user\n\n    dispatch({\n      type: actions.SET_CURRENT_USER,\n      payload: decoded\n    });\n  }).then(() => {\n    // load all accounts\n    dispatch(loadAccounts());\n  }).catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from localStorage\n  localStorage.removeItem('jwtToken'); // Remove auth header for future requests\n  // Delete auth header\n\n  delete axios.defaults.headers.common['Authorization']; // Set current user to {} which will set isAuthenticated to false\n\n  dispatch({\n    type: actions.SET_CURRENT_USER,\n    payload: {}\n  });\n}; // Contact Trung\n\nexport const contact = user => dispatch => {\n  dispatch(clearErrors());\n  dispatch(clearSuccess());\n  axios.post('/contact', user).then(res => {\n    dispatch({\n      type: actions.GET_SUCCESS,\n      payload: {\n        success_msg: res.data.success_msg,\n        type: 'contact'\n      }\n    });\n  }).catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // verify email before reset user password\n\nexport const verifyEmail = email => dispatch => {\n  dispatch(clearErrors());\n  dispatch(clearSuccess());\n  axios.post('/users/verify', {\n    email: email\n  }).then(res => {\n    dispatch({\n      type: actions.GET_SUCCESS,\n      payload: {\n        success_msg: res.data.success_msg,\n        type: 'verifyEmail'\n      }\n    });\n  }).catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // reset user password\n\nexport const resetPassword = (token, history) => dispatch => {\n  axios.get(\"/users/reset/\".concat(token)).then(res => {\n    dispatch({\n      type: actions.VERIFY_USER,\n      payload: {\n        id: res.data['_id'],\n        resetPasswordToken: res.data.resetPasswordToken,\n        resetPasswordExpires: res.data.resetPasswordExpires\n      }\n    });\n    dispatch(clearSuccess());\n  }).catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: err.response.data\n    });\n    history.push('/users/forgot');\n  });\n}; // Start reset password by comparing the two, then update!\n\nexport const updatePassword = (user, password, confirm_password) => dispatch => {\n  axios.post(\"/users/reset/update_password\", {\n    user: user,\n    password: password,\n    confirm_password: confirm_password\n  }).then(res => {\n    dispatch({\n      type: actions.GET_SUCCESS,\n      payload: {\n        success_msg: res.data.success_msg,\n        type: actions.UPDATE_PASSWORD\n      }\n    });\n  }).catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: {\n        type: actions.UPDATE_PASSWORD,\n        errors: err.response.data\n      }\n    });\n  });\n}; // delete user account\n\nexport const deleteAccount = history => dispatch => {\n  axios.delete('/users/delete').then(res => {\n    localStorage.removeItem('jwtToken');\n    delete axios.defaults.headers.common['Authorization'];\n    dispatch({\n      type: actions.SET_CURRENT_USER,\n      payload: {}\n    });\n    dispatch({\n      type: actions.GET_SUCCESS,\n      payload: {\n        success_msg: res.data.success_msg,\n        type: actions.DELETE_USER\n      }\n    });\n    history.push({\n      pathname: '/users/login',\n      state: {\n        success: true,\n        success_msg: res.data.success_msg\n      }\n    });\n  }).catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: {\n        type: actions.DELETE_USER,\n        errors: err.response.data\n      }\n    });\n  });\n};","map":{"version":3,"sources":["/Users/trungvo/javascript-stack/smart-money/client/src/actions/usersActions.js"],"names":["axios","actions","jwt_decode","clearErrors","clearSuccess","loadAccounts","createUser","newUser","history","dispatch","post","then","res","type","ADD_USER","payload","data","push","pathname","state","success","success_msg","catch","err","GET_ERRORS","response","loginUser","user","localStorage","setItem","token","defaults","headers","common","decoded","SET_CURRENT_USER","googleSignIn","tokenObj","id_token","name","email","imageUrl","picture","logoutUser","removeItem","contact","GET_SUCCESS","verifyEmail","resetPassword","get","VERIFY_USER","id","resetPasswordToken","resetPasswordExpires","updatePassword","password","confirm_password","UPDATE_PASSWORD","errors","deleteAccount","delete","DELETE_USER"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport * as actions from './types';\nimport jwt_decode from 'jwt-decode';\nimport {clearErrors, clearSuccess} from './clearErrSuccess';\nimport {loadAccounts} from './accountActions';\n\n// register new user\nexport const createUser = (newUser, history) => dispatch => {\n  axios.post('/users/register', newUser)\n    .then(res => {\n      dispatch({\n        type: actions.ADD_USER,\n        payload: res.data.newUser\n      })\n      history.push({\n        pathname: '/users/login',\n        state: {\n          success: true,\n          success_msg: 'You are now registered and can log in'\n        }\n      });\n    })\n    .catch(err => {\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: err.response.data\n      })\n    })\n};\n\n// login with email and password\nexport const loginUser = (user) => dispatch => {\n  axios.post('/users/login', user)\n    .then(res => {\n      // save token to localstorage\n      localStorage.setItem('jwtToken', res.data.token);\n      // Set token to Auth header\n      if (res.data.token) {\n        // Apply to every request\n        axios.defaults.headers.common['Authorization'] = res.data.token;\n      }\n      // Decode token to get user data\n      const decoded = jwt_decode(res.data.token);\n      // Set current user\n      dispatch({\n        type: actions.SET_CURRENT_USER,\n        payload: decoded\n      })\n    })\n    .catch(err => {\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: err.response.data\n      })\n    })\n}\n\n// Login with Google\nexport const googleSignIn = (tokenObj) => dispatch => {\n  var token = tokenObj.id_token;\n  // decoded user info with JWT token\n  var decoded = jwt_decode(token);\n  \n  // set user\n  const user = {\n    name: decoded.name,\n    email: decoded.email,\n    imageUrl: decoded.picture\n  }\n  // call POST request\n  axios.post('/users/googleLogin', user)\n    .then(res => {\n      // save token to localstorage\n      localStorage.setItem('jwtToken', res.data.token);\n      // Apply to every request\n      axios.defaults.headers.common['Authorization'] = res.data.token;\n      // decoded user info with JWT token\n      var decoded = jwt_decode(res.data.token);\n      // Set current user\n      dispatch({\n        type: actions.SET_CURRENT_USER,\n        payload: decoded\n      })\n    })\n    .then(() => {\n      // load all accounts\n      dispatch(loadAccounts());\n    })\n    .catch(err => {\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: err.response.data\n      })\n    })\n};\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n  // Remove token from localStorage\n  localStorage.removeItem('jwtToken');\n  // Remove auth header for future requests\n  // Delete auth header\n  delete axios.defaults.headers.common['Authorization'];\n  // Set current user to {} which will set isAuthenticated to false\n  dispatch({\n    type: actions.SET_CURRENT_USER,\n    payload: {}\n  })\n};\n\n// Contact Trung\nexport const contact = (user) => dispatch => {\n  dispatch(clearErrors());\n  dispatch(clearSuccess());\n\n  axios.post('/contact', user)\n    .then(res => {\n      dispatch({\n        type: actions.GET_SUCCESS,\n        payload: {\n          success_msg: res.data.success_msg,\n          type: 'contact'\n        }\n      })\n    })\n    .catch(err => {\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: err.response.data\n      })\n    })\n}\n\n// verify email before reset user password\nexport const verifyEmail = (email) => dispatch => {\n  dispatch(clearErrors());\n  dispatch(clearSuccess());\n\n  axios.post('/users/verify', {email: email})\n    .then(res => {\n      dispatch({\n        type: actions.GET_SUCCESS,\n        payload: {\n          success_msg: res.data.success_msg,\n          type: 'verifyEmail'\n        }\n      })\n    })\n    .catch(err => {\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: err.response.data\n      })\n    });\n};\n\n// reset user password\nexport const resetPassword = (token, history) => dispatch => {\n  axios.get(`/users/reset/${token}`)\n    .then(res => {\n      dispatch({\n        type: actions.VERIFY_USER,\n        payload: {\n          id: res.data['_id'],\n          resetPasswordToken: res.data.resetPasswordToken,\n          resetPasswordExpires: res.data.resetPasswordExpires\n        }\n      })\n      dispatch(clearSuccess());\n    })\n    .catch(err => {\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: err.response.data\n      })\n      history.push('/users/forgot');\n    })\n}\n\n// Start reset password by comparing the two, then update!\nexport const updatePassword = (user, password, confirm_password) => dispatch => {\n  axios.post(`/users/reset/update_password`, {\n    user: user,\n    password: password,\n    confirm_password: confirm_password\n  })\n  .then(res => {\n    dispatch({\n      type: actions.GET_SUCCESS,\n      payload: {\n        success_msg: res.data.success_msg,\n        type: actions.UPDATE_PASSWORD\n      }\n    })\n  })\n  .catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: {\n        type: actions.UPDATE_PASSWORD,\n        errors: err.response.data\n      }\n    })\n  })\n}\n\n// delete user account\nexport const deleteAccount = (history) => dispatch => {\n  axios.delete('/users/delete')\n    .then(res => {\n      localStorage.removeItem('jwtToken');\n      delete axios.defaults.headers.common['Authorization'];\n      dispatch({\n        type: actions.SET_CURRENT_USER,\n        payload: {}\n      })\n      dispatch({\n        type: actions.GET_SUCCESS,\n        payload: {\n          success_msg: res.data.success_msg,\n          type: actions.DELETE_USER\n        }\n      })\n      history.push({\n        pathname: '/users/login',\n        state: {\n          success: true,\n          success_msg: res.data.success_msg\n        }\n      })\n    })\n    .catch(err => {\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: {\n          type: actions.DELETE_USER,\n          errors: err.response.data\n        }\n      })\n    })\n}\n\n"]},"metadata":{},"sourceType":"module"}