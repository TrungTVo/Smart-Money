{"ast":null,"code":"var _jsxFileName = \"/Users/trungvo/javascript-stack/smart-money/client/src/common/charts/MyChart.js\";\nimport React, { Component } from 'react';\nimport Chart from \"chart.js\";\nimport { connect } from 'react-redux';\nimport { analysis } from '../../actions/dataAnalysis';\n\nclass MyChart extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      window_width: window.innerWidth\n    };\n    this.chartRef = React.createRef();\n\n    this.buildChart = () => {\n      const window_width = this.state.window_width;\n      const _this$props = this.props,\n            type = _this$props.type,\n            position = _this$props.position,\n            data = _this$props.data;\n      window.addEventListener('resize', () => {\n        this.setState({\n          window_width: window.innerWidth\n        });\n      });\n      const myChartRef = this.chartRef.current.getContext(\"2d\");\n      new Chart(myChartRef, {\n        type: type,\n        data: data,\n        options: {\n          title: {\n            text: 'Chart',\n            display: true\n          },\n          //responsive: true,\n          legend: {\n            display: true,\n            position: window_width > 945 ? type === 'pie' || type === 'doughnut' ? 'right' : position : 'bottom',\n            labels: {\n              boxWidth: window_width < 600 ? 15 : 40,\n              generateLabels: function (chart) {\n                var data = chart.data;\n\n                if (data.labels.length && data.datasets.length) {\n                  if (type !== 'line') {\n                    return data.labels.map(function (label, i) {\n                      return {\n                        text: label + ': ' + data.datasets[0].data[i],\n                        fillStyle: data.datasets[0].backgroundColor[i],\n                        index: i\n                      };\n                    });\n                  } else {\n                    return data.datasets.map(function (kind, i) {\n                      return {\n                        text: kind.label,\n                        fillStyle: kind.borderColor\n                      };\n                    });\n                  }\n                }\n\n                return [];\n              }\n            }\n          }\n        }\n      });\n    };\n  }\n\n  componentDidMount() {//this.buildChart();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const accounts = nextProps.accounts,\n          transactions = nextProps.transactions;\n\n    if (!accounts.loading && !transactions.loading && Object.keys(accounts.account).length > 0 && Object.keys(transactions.account).length > 0) {\n      this.props.analysis(accounts, transactions);\n    }\n  }\n\n  render() {\n    const window_width = this.state.window_width;\n    const type = this.props.type;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"myChart\",\n      style: {\n        height: window_width < 350 ? type === 'pie' ? '300vh' : '350vh' : type === 'horizontalBar' ? '350vh' : '250vh',\n        width: '400vw'\n      },\n      ref: this.chartRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  errors: state.errors,\n  accounts: state.accounts,\n  transactions: state.transactions\n});\n\nexport default connect(mapStateToProps, {\n  analysis\n})(MyChart);","map":{"version":3,"sources":["/Users/trungvo/javascript-stack/smart-money/client/src/common/charts/MyChart.js"],"names":["React","Component","Chart","connect","analysis","MyChart","state","window_width","window","innerWidth","chartRef","createRef","buildChart","props","type","position","data","addEventListener","setState","myChartRef","current","getContext","options","title","text","display","legend","labels","boxWidth","generateLabels","chart","length","datasets","map","label","i","fillStyle","backgroundColor","index","kind","borderColor","componentDidMount","componentWillReceiveProps","nextProps","accounts","transactions","loading","Object","keys","account","render","height","width","mapStateToProps","errors"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Chart from \"chart.js\";\nimport {connect} from 'react-redux';\nimport { analysis} from '../../actions/dataAnalysis';\n\nclass MyChart extends Component {\n  state = {\n    window_width: window.innerWidth\n  }\n  chartRef = React.createRef();\n\n  componentDidMount() {\n    //this.buildChart();\n    \n  }\n\n  componentWillReceiveProps(nextProps) {\n    const {accounts, transactions} = nextProps;\n    \n    if (!accounts.loading && !transactions.loading\n      && Object.keys(accounts.account).length > 0 && Object.keys(transactions.account).length > 0 ) {\n\n      this.props.analysis(accounts, transactions);\n    }\n  }\n\n  buildChart = () => {\n    const {window_width} = this.state;\n    const {type, position, data} = this.props;\n\n    window.addEventListener('resize', () => {\n      this.setState({ window_width: window.innerWidth  })\n    });\n\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\n\n    new Chart(myChartRef, {\n      type: type,\n      data: data,\n      options: {\n        title: {\n          text: 'Chart',\n          display: true\n        },\n        //responsive: true,\n        legend: {\n          display: true,\n          position: window_width > 945 ? (type === 'pie' || type ==='doughnut' ? 'right' : position) : 'bottom',\n          labels: {\n            boxWidth: window_width < 600 ? 15 : 40,\n            generateLabels: function(chart) {\n              var data = chart.data;\n              if (data.labels.length && data.datasets.length) {\n                if (type !== 'line') {\n                  return data.labels.map(function (label, i) {\n                    return {\n                      text: label + ': ' + data.datasets[0].data[i],\n                      fillStyle: data.datasets[0].backgroundColor[i],\n                      index: i\n                    };\n                  });\n                } else {\n                  return data.datasets.map(function(kind, i) {\n                    return {\n                      text: kind.label,\n                      fillStyle: kind.borderColor\n                    }\n                  })\n                }\n              }\n              return [];\n            }\n          }\n        }\n      }\n    });\n  }\n  render() {\n    const {window_width} = this.state;\n    const { type } = this.props;\n\n    return (\n      <div>\n        <canvas\n          id=\"myChart\" \n          style={{height: window_width < 350 ? (type === 'pie' ? '300vh' : '350vh') : (type === 'horizontalBar' ? '350vh' : '250vh'), width: '400vw'}}\n          ref={this.chartRef}\n        />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  errors: state.errors,\n  accounts: state.accounts,\n  transactions: state.transactions\n}) \n\nexport default connect(mapStateToProps, {analysis})(MyChart);"]},"metadata":{},"sourceType":"module"}