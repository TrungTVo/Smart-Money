{"ast":null,"code":"import axios from 'axios';\nimport * as actions from './types';\nimport jwt_decode from 'jwt-decode'; // register new user\n\nexport const createUser = (newUser, history) => dispatch => {\n  axios.post('/users/register', newUser).then(res => {\n    dispatch({\n      type: actions.ADD_USER,\n      payload: res.data.newUser\n    });\n    history.push({\n      pathname: '/users/login',\n      state: {\n        success: true\n      }\n    });\n  }).catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // login with email and password\n\nexport const loginUser = user => dispatch => {\n  axios.post('/users/login', user).then(res => {\n    console.log(res); // save token to localstorage\n\n    localStorage.setItem('jwtToken', res.data.token); // Set token to Auth header\n\n    if (res.data.token) {\n      // Apply to every request\n      axios.defaults.headers.common['Authorization'] = res.data.token;\n    } else {\n      // Delete auth header\n      delete axios.defaults.headers.common['Authorization'];\n    } // Decode token to get user data\n\n\n    const decoded = jwt_decode(res.data.token); // Set current user\n\n    dispatch({\n      type: actions.SET_CURRENT_USER,\n      payload: decoded\n    });\n  }).catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // Login with Google\n\nexport const googleSignIn = tokenObj => dispatch => {\n  var token = tokenObj.id_token; // decoded user info with JWT token\n\n  var decoded = jwt_decode(token); // set user\n\n  const user = {\n    name: decoded.name,\n    email: decoded.email,\n    imageUrl: decoded.picture // call POST request\n\n  };\n  axios.post('/users/googleLogin', user).then(res => {\n    console.log(res); // save token to localstorage\n\n    localStorage.setItem('jwtToken', res.data.token); // Apply to every request\n\n    axios.defaults.headers.common['Authorization'] = res.data.token; // decoded user info with JWT token\n\n    var decoded = jwt_decode(res.data.token); // Set current user\n\n    dispatch({\n      type: actions.SET_CURRENT_USER,\n      payload: decoded\n    });\n  }).catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from localStorage\n  localStorage.removeItem('jwtToken'); // Remove auth header for future requests\n  // Delete auth header\n\n  delete axios.defaults.headers.common['Authorization']; // Set current user to {} which will set isAuthenticated to false\n\n  dispatch({\n    type: actions.SET_CURRENT_USER,\n    payload: {}\n  });\n}; // verify email before reset user password\n\nexport const verifyEmail = email => dispatch => {\n  dispatch(clearErrors());\n  dispatch(clearSuccess());\n  axios.post('/users/verify', {\n    email: email\n  }).then(res => {\n    dispatch({\n      type: actions.GET_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // reset user password\n\nexport const resetPassword = (token, history) => dispatch => {\n  axios.get(\"/users/reset/\".concat(token)).then(res => {\n    dispatch({\n      type: actions.VERIFY_USER,\n      payload: {\n        id: res.data['_id'],\n        resetPasswordToken: res.data.resetPasswordToken,\n        resetPasswordExpires: res.data.resetPasswordExpires\n      }\n    });\n    dispatch(clearSuccess());\n  }).catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: err.response.data\n    });\n    history.push('/users/forgot');\n  });\n}; // Start reset password by comparing the two, then update!\n\nexport const updatePassword = (user, password, confirm_password) => dispatch => {\n  axios.post(\"/users/reset/update_password\", {\n    user: user,\n    password: password,\n    confirm_password: confirm_password\n  }).then(res => {\n    dispatch({\n      type: actions.GET_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // delete user account\n\nexport const deleteAccount = () => dispatch => {\n  axios.delete('/users/delete').then(res => {\n    console.log(res);\n  }).catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: err.response.data\n    });\n  });\n}; // Clear errors\n\nexport const clearErrors = () => {\n  return {\n    type: actions.CLEAR_ERRORS\n  };\n}; // Clear success\n\nexport const clearSuccess = () => {\n  return {\n    type: actions.CLEAR_SUCCESS\n  };\n};","map":{"version":3,"sources":["/Users/trungvo/javascript-stack/smart-money/client/src/actions/usersActions.js"],"names":["axios","actions","jwt_decode","createUser","newUser","history","dispatch","post","then","res","type","ADD_USER","payload","data","push","pathname","state","success","catch","err","GET_ERRORS","response","loginUser","user","console","log","localStorage","setItem","token","defaults","headers","common","decoded","SET_CURRENT_USER","googleSignIn","tokenObj","id_token","name","email","imageUrl","picture","logoutUser","removeItem","verifyEmail","clearErrors","clearSuccess","GET_SUCCESS","resetPassword","get","VERIFY_USER","id","resetPasswordToken","resetPasswordExpires","updatePassword","password","confirm_password","deleteAccount","delete","CLEAR_ERRORS","CLEAR_SUCCESS"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport * as actions from './types';\nimport jwt_decode from 'jwt-decode';\n\n// register new user\nexport const createUser = (newUser, history) => dispatch => {\n  axios.post('/users/register', newUser)\n    .then(res => {\n      dispatch({\n        type: actions.ADD_USER,\n        payload: res.data.newUser\n      })\n      history.push({\n        pathname: '/users/login',\n        state: {success: true}\n      });\n    })\n    .catch(err => {\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: err.response.data\n      })\n    })\n};\n\n// login with email and password\nexport const loginUser = (user) => dispatch => {\n  axios.post('/users/login', user)\n    .then(res => {\n      console.log(res);\n      // save token to localstorage\n      localStorage.setItem('jwtToken', res.data.token);\n      // Set token to Auth header\n      if (res.data.token) {\n        // Apply to every request\n        axios.defaults.headers.common['Authorization'] = res.data.token;\n      } else {\n        // Delete auth header\n        delete axios.defaults.headers.common['Authorization'];\n      }\n      // Decode token to get user data\n      const decoded = jwt_decode(res.data.token);\n      // Set current user\n      dispatch({\n        type: actions.SET_CURRENT_USER,\n        payload: decoded\n      })\n    })\n    .catch(err => {\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: err.response.data\n      })\n    })\n}\n\n// Login with Google\nexport const googleSignIn = (tokenObj) => dispatch => {\n  var token = tokenObj.id_token;\n  // decoded user info with JWT token\n  var decoded = jwt_decode(token);\n  \n  // set user\n  const user = {\n    name: decoded.name,\n    email: decoded.email,\n    imageUrl: decoded.picture\n  }\n  // call POST request\n  axios.post('/users/googleLogin', user)\n    .then(res => {\n      console.log(res)\n      // save token to localstorage\n      localStorage.setItem('jwtToken', res.data.token);\n      // Apply to every request\n      axios.defaults.headers.common['Authorization'] = res.data.token;\n      // decoded user info with JWT token\n      var decoded = jwt_decode(res.data.token);\n      // Set current user\n      dispatch({\n        type: actions.SET_CURRENT_USER,\n        payload: decoded\n      })\n    })\n    .catch(err => {\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: err.response.data\n      })\n    })\n};\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n  // Remove token from localStorage\n  localStorage.removeItem('jwtToken');\n  // Remove auth header for future requests\n  // Delete auth header\n  delete axios.defaults.headers.common['Authorization'];\n  // Set current user to {} which will set isAuthenticated to false\n  dispatch({\n    type: actions.SET_CURRENT_USER,\n    payload: {}\n  })\n};\n\n// verify email before reset user password\nexport const verifyEmail = (email) => dispatch => {\n  dispatch(clearErrors());\n  dispatch(clearSuccess());\n\n  axios.post('/users/verify', {email: email})\n    .then(res => {\n      dispatch({\n        type: actions.GET_SUCCESS,\n        payload: res.data\n      })\n    })\n    .catch(err => {\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: err.response.data\n      })\n    });\n};\n\n// reset user password\nexport const resetPassword = (token, history) => dispatch => {\n  axios.get(`/users/reset/${token}`)\n    .then(res => {\n      dispatch({\n        type: actions.VERIFY_USER,\n        payload: {\n          id: res.data['_id'],\n          resetPasswordToken: res.data.resetPasswordToken,\n          resetPasswordExpires: res.data.resetPasswordExpires\n        }\n      })\n      dispatch(clearSuccess());\n    })\n    .catch(err => {\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: err.response.data\n      })\n      history.push('/users/forgot');\n    })\n}\n\n// Start reset password by comparing the two, then update!\nexport const updatePassword = (user, password, confirm_password) => dispatch => {\n  axios.post(`/users/reset/update_password`, {\n    user: user,\n    password: password,\n    confirm_password: confirm_password\n  })\n  .then(res => {\n    dispatch({\n      type: actions.GET_SUCCESS,\n      payload: res.data\n    })\n  })\n  .catch(err => {\n    dispatch({\n      type: actions.GET_ERRORS,\n      payload: err.response.data\n    })\n  })\n}\n\n// delete user account\nexport const deleteAccount = () => dispatch => {\n  axios.delete('/users/delete')\n    .then(res => {\n      console.log(res);\n    })\n    .catch(err => {\n      dispatch({\n        type: actions.GET_ERRORS,\n        payload: err.response.data\n      })\n    })\n}\n\n// Clear errors\nexport const clearErrors = () => {\n  return {\n    type: actions.CLEAR_ERRORS\n  };\n};\n\n// Clear success\nexport const clearSuccess = () => {\n  return {\n    type: actions.CLEAR_SUCCESS\n  };\n};"]},"metadata":{},"sourceType":"module"}